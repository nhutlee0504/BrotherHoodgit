@page "/ChiTietSanPham/{ProductId:int}"
@using SanGiaoDich_BrotherHood.Shared.Models
@using SanGiaoDich_BrotherHood.Shared.Dto
@using System.Text.Json
@using System.Text
@inject HttpClient httpclient
@inject IJSRuntime JSRuntime

<div class="container">
    <ul class="breadcrumb">
        <li class="breadcrumb-item"><a href="#"><i class="bi bi-house"></i> Trang chủ</a></li>
        <li class="breadcrumb-item"><a href="#">Sản phẩm</a></li>
        <li class="breadcrumb-item active"><a href="#">Chi tiết sản phẩm / @product?.Name</a></li>
    </ul>

    <div class="row">
        <div class="col-md-6">
            @if (images != null && images.Any())
            {
                <!-- Ảnh lớn -->
                <div class="row mb-4">
                    <div class="col-md-12">
                        <img src="/AnhSanPham/@images.First().Image" class="img-fluid" alt="Ảnh chính" style="border-radius: 15px; max-height: 400px; width: 100%; object-fit: cover;">
                    </div>
                </div>

                <!-- Ảnh nhỏ -->
                <div class="row">
                    @foreach (var item in images.Skip(1))
                    {
                        <div class="col-md-6 mb-2 d-flex">
                            <img src="/AnhSanPham/@item.Image" class="img-fluid flex-fill" alt="Ảnh phụ" style="border-radius: 15px; height: 150px; object-fit: cover;">
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-warning" role="alert">
                    Không có hình ảnh cho sản phẩm này.
                </div>
            }
        </div>

        <div class="col-md-6 shadow rounded">
            <!-- Thông tin người bán -->
            <div class="profile-card mb-3">
                <div class="profile-avatar">
                    <a href="ThongTinNguoiDung">
                        <img src="/AnhAvatar/@user?.ImageAccount" alt="Người bán" class="img-fluid rounded-circle" style="max-width: 100px;" />
                    </a>

                </div>
                <div class="profile-info">
                    @if (user != null)
                    {
                        <div class="row align-items-center">
                            <div class="col-9 col-md-8">
                                <p class="mb-0">
                                    <img src="/AnhAvatar/user.png" style="width:18px; margin-right: 5px;" />
                                    <strong>@user.FullName</strong>
                                </p>
                            </div>
                            <div class="col-3 col-md-4 d-flex justify-content-end">
                                <span class="badge text-bg-success d-flex align-items-center" style="background-color: green; padding: 5px 10px;">
                                    <img src="/AnhAvatar/king.png" style="width:18px; margin-right: 5px;" />
                                    Thành viên
                                </span>
                            </div>
                        </div>
                    }

                    <p>
                        <i class="bi bi-bag"></i> Các sản phẩm đã bán: <strong>100</strong>
                    </p>
                    <p class="text-success mb-0">
                        Đang hoạt động
                    </p>
                </div>
            </div>
            <!-- Thay thế checkbox bằng hình trái tim -->
            <div class="favorite-heart" @onchange="ToggleFavorite">
                <i class="fas fa-heart @((isFavorite) ? "heart-checked" : "heart-unchecked")" @onclick="ToggleFavorite"></i>
            </div>

            <h3 style="font-weight:bolder">@product?.Name</h3>
            <h4 class="text-success mb-2"><i class="bi bi-cash-coin"></i>@product?.Price.ToString("N0") VND</h4>
            <p><strong>Loại sản phẩm:</strong> @categoryName</p>
            <p><i class="bi bi-clock"></i> Đăng vào lúc: @(product?.StartDate?.ToString("dd/MM/yyyy") ?? "Chưa xác định")</p>

            <button class="btn btn-danger rounded-pill mb-2 w-100"><i class="bi bi-person-circle"></i> Liên hệ người bán</button>
            <button class="btn btn-success rounded-pill mb-2 w-100"><i class="bi bi-telephone-forward"></i> Liên hệ qua 011*****</button>
        </div>
    </div>

    <!-- Mô tả sản phẩm -->
    <div class="product-description card mt-4">
        <div class="card-header text-white">
            <h4 class="card-title">Mô tả sản phẩm</h4>
        </div>
        <div class="card-body">
            <p></p>
        </div>
    </div>

    <!-- Đánh giá sản phẩm -->
    <div class="mt-4">
        <h4 class="review-title">Đánh giá</h4>
        <div class="row">
            <!-- Your review cards logic can be placed here -->
        </div>
    </div>

    <!-- Sản phẩm liên quan -->
    <div class="mt-4">
        <h4 style="font-weight: bold; color: #28a745; border-bottom: 2px solid #28a745; padding-bottom: 10px; text-align: center;">
            Sản phẩm liên quan
        </h4>
        <div class="row">
            <!-- Your related products logic can be placed here -->
        </div>
    </div>
</div>

<style>
    .old-price {
        color: black;
    }

    .new-price {
        color: red;
        font-weight: bold;
    }

    /* Thêm style cho trái tim */
    .favorite-heart i {
        font-size: 30px;
        cursor: pointer;
        transition: color 0.3s ease;
    }

    .heart-checked {
        color: #28a745; /* Xanh lá khi đã yêu thích */
    }

    .heart-unchecked {
        color: gray; /* Màu xám khi chưa yêu thích */
    }
</style>

@code {
    [Parameter] public int ProductId { get; set; }
    private Product product;
    private string categoryName;
    private Account user;
    private List<ImageProduct> images;
    private string errorMessage;
    private bool isFavorite = false; // Trạng thái yêu thích của sản phẩm

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Gọi đồng thời các API cần thiết
            var tasks = new List<Task>
            {
                LoadProductDetails(),
                LoadFavoriteStatus()
            };

            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }

    private async Task LoadProductDetails()
    {
        try
        {
            product = await GetProductById(ProductId);

            if (product != null)
            {
                // Chỉ tải thêm dữ liệu khi sản phẩm tồn tại
                var categoryTask = GetCategoryNameById(product.IDCategory);
                var sellerTask = GetSellerByUsername(product.UserName);
                var imagesTask = GetImagesByProductId(product.IDProduct);

                // Chạy song song các tác vụ
                await Task.WhenAll(categoryTask, sellerTask, imagesTask);

                categoryName = await categoryTask;
                user = await sellerTask;
                images = await imagesTask;
            }
            else
            {
                errorMessage = "Không tìm thấy sản phẩm này.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải chi tiết sản phẩm: {ex.Message}";
        }
    }

    private async Task<Product> GetProductById(int id)
    {
        var response = await httpclient.GetAsync($"api/product/GetProductById/{id}");
        return response.IsSuccessStatusCode
            ? await response.Content.ReadFromJsonAsync<Product>()
            : throw new Exception("Không thể lấy thông tin sản phẩm.");
    }

    private async Task<string> GetCategoryNameById(int idCategory)
    {
        var response = await httpclient.GetAsync($"api/category/GetCategoryByID/{idCategory}");
        return response.IsSuccessStatusCode
            ? (await response.Content.ReadFromJsonAsync<Category>())?.NameCate ?? "Không xác định"
            : throw new Exception("Không thể lấy thông tin loại sản phẩm.");
    }

    private async Task<Account> GetSellerByUsername(string username)
    {
        if (string.IsNullOrEmpty(username)) return null;

        var response = await httpclient.GetAsync($"api/user/GetAccountInfoByName/{username}");
        return response.IsSuccessStatusCode
            ? await response.Content.ReadFromJsonAsync<Account>()
            : throw new Exception("Không thể lấy thông tin người bán.");
    }

    private async Task<List<ImageProduct>> GetImagesByProductId(int id)
    {
        var response = await httpclient.GetAsync($"api/ImageProduct/GetImageProduct/{id}");
        return response.IsSuccessStatusCode
            ? await response.Content.ReadFromJsonAsync<List<ImageProduct>>() ?? new List<ImageProduct>()
            : new List<ImageProduct>();
    }

    private async Task LoadFavoriteStatus()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                var response = await httpclient.GetAsync("api/favorite/GetFavoriteAccount");
                if (response.IsSuccessStatusCode)
                {
                    var favoriteList = await response.Content.ReadFromJsonAsync<List<Product>>();
                    isFavorite = favoriteList?.Any(fav => fav.IDProduct == ProductId) ?? false;
                }
            }
        }
        catch
        {
            // Không gây lỗi nếu không thể tải danh sách yêu thích
            isFavorite = false;
        }
    }

    private async Task ToggleFavorite()
    {
        isFavorite = !isFavorite;

        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (string.IsNullOrEmpty(token))
            {
                errorMessage = "Bạn cần đăng nhập để thực hiện hành động này.";
                return;
            }

            if (isFavorite)
            {
                var response = await httpclient.GetAsync($"api/favorite/AddFavorite/{ProductId}");
                if (!response.IsSuccessStatusCode)
                {
                    errorMessage = "Không thể thêm sản phẩm vào danh sách yêu thích.";
                    isFavorite = false; // Quay lại trạng thái trước đó nếu lỗi
                }
            }
            else
            {
                var response = await httpclient.DeleteAsync($"api/favorite/DeleteFavorite/{ProductId}");
                if (!response.IsSuccessStatusCode)
                {
                    errorMessage = "Không thể xóa sản phẩm khỏi danh sách yêu thích.";
                    isFavorite = true; // Quay lại trạng thái trước đó nếu lỗi
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi cập nhật trạng thái yêu thích: {ex.Message}";
        }
    }
}
