@page "/NhanTin"
@using SanGiaoDich_BrotherHood.Shared.Models
@inject HttpClient http
@inject IJSRuntime jsruntime
@inject NavigationManager Navigation

<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
<!-- CSS only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

<style>
    body {
        background-color: #f4f7f6;
        
    }

    #ChatBox {
        background: #fff;
        border-radius: 0.55rem;
        border: 1px solid #ced4da;
    }

        #ChatBox * {
            /* width */
            /* Track */
            /* Handle */
            /* Handle on hover */
        }

            #ChatBox *::-webkit-scrollbar {
                width: 5px;
            }

            #ChatBox *::-webkit-scrollbar-track {
                background: transparent;
            }

            #ChatBox *::-webkit-scrollbar-thumb {
                -webkit-transition: 0.3s all;
                -moz-transition: 0.3s all;
                -ms-transition: 0.3s all;
                -o-transition: 0.3s all;
                transition: 0.3s all;
                background-color: #cccccc;
                border-radius: 0.25rem;
            }

                #ChatBox *::-webkit-scrollbar-thumb:hover {
                    background-color: #555;
                }

        #ChatBox .user-avatar {
            border-radius: 9999999px;
            border: 5px solid #00000015;
            overflow: hidden;
        }

        #ChatBox .sidebar {
            border-right: 1px solid #ced4da;
            padding: 1rem;
        }

            #ChatBox .sidebar .users-list {
                list-style-type: none;
                padding: 0;
                margin: 0;
                max-height: 100%;
                overflow-x: hidden;
                overflow-y: scroll;
            }

                #ChatBox .sidebar .users-list li {
                    cursor: pointer;
                    padding: 0.25rem;
                    -webkit-transition: 0.3s all;
                    -moz-transition: 0.3s all;
                    -ms-transition: 0.3s all;
                    -o-transition: 0.3s all;
                    transition: 0.3s all;
                    margin-bottom: 0.25rem;
                }

                    #ChatBox .sidebar .users-list li.active, #ChatBox .sidebar .users-list li:hover {
                        background: #75e8b2;
                        border-radius: 0.25rem;
                        color: white;

                    }

                    #ChatBox .sidebar .users-list li .user-name {
                        font-size: 1rem;
                    }

                    #ChatBox .sidebar .users-list li .status {
                        text-transform: uppercase;
                        font-weight: bold;
                        font-size: 9px;
                        color: #adb5bd;
                    }

        #ChatBox .chat-frame {
            padding: 1rem;
        }

            #ChatBox .chat-frame .action-frame {
                padding-bottom: 1rem;
                border-bottom: 1px solid #ced4da;
            }

            #ChatBox .chat-frame .message-history {
                max-height: 500px;
                overflow-x: hidden;
                overflow-y: scroll;
            }

                #ChatBox .chat-frame .message-history .message-line {
                    padding: 1rem;
                }

                    #ChatBox .chat-frame .message-history .message-line .user-avatar {
                        width: fit-content;
                    }

                    #ChatBox .chat-frame .message-history .message-line.reply .message:before {
                        left: 20px;
                        right: initial;
                    }

                    #ChatBox .chat-frame .message-history .message-line .message {
                        background: #efefef;
                        border-radius: 0.55rem;
                        font-size: 14px;
                        color: #2d2d2d;
                        padding: 1rem;
                        width: fit-content;
                        position: relative;
                    }

                        #ChatBox .chat-frame .message-history .message-line .message:before {
                            content: "";
                            display: block;
                            position: absolute;
                            top: -25px;
                            right: 20px;
                            border-top: 15px solid transparent;
                            border-right: 15px solid transparent;
                            border-bottom: 15px solid #efefef;
                            border-left: 15px solid transparent;
                        }

            #ChatBox .chat-frame .inputs {
                padding-top: 1rem;
                border-top: 1px solid #ced4da;
                
            }
</style>

<div class="container">
    <div id="ChatBox">
        <div class="row">
            <div class="col-md-4">
                <div class="sidebar h-100">
                    <form>
                        <div class="form-group">
                            <div class="input-group mb-3">
                                <span class="input-group-text" id="basic-addon1"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" placeholder="Tìm kiếm...." aria-label="Search user" aria-describedby="basic-addon1" @bind="searchTerm">
                            </div>
                        </div>
                    </form>
                    <hr>
                    <ul class="users-list">
                        @* Danh sách user *@
                        @foreach (var conversation in filteredConversationList)
                        {
                            <li class="list-group-item user-profile conversation-item d-flex align-items-center @(selectedUser == conversation.Username ? "active" : "")"
                                @onclick="() => LoadMessages(conversation)">
                                <div class="user-avatar me-3">
                                    <img src="https://plhold.com/avatar/60?text=@(conversation.Username)" alt="@conversation.Username" />
                                </div>
                                <div class="d-flex flex-column">
                                    <strong class="user-name">
                                        @(conversation.Username)
                                    </strong>                                  
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="col-md-8">
                <div class="chat-frame d-flex flex-column justify-content-between">
                    <div class="action-frame d-flex align-items-center">
                        <div class="user-avatar me-3">
                            <img src="https://plhold.com/avatar/60?text=Angelien+Austėja+Rakes" alt="" />
                        </div>
                        <div class="d-flex flex-column">
                            <strong class="user-name">@selectedUser</strong>
                        </div>
                        <div class="action-buttons d-flex ms-auto">
                            <button class="btn btn-outline-secondary me-2"><i class="fas fa-camera"></i></button>
                            <button class="btn btn-outline-info me-2"><i class="fas fa-image"></i></button>
                            <button class="btn btn-outline-primary me-2"><i class="fas fa-cogs"></i></button>
                            <div class="dropstart">
                                <button class="btn btn-outline-success dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                                    <li><a class="dropdown-item" href="#">Block</a></li>
                                    <li><a class="dropdown-item" href="#">Ignore</a></li>
                                    <li><a class="dropdown-item" href="#">Remove friend</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="message-history py-3">
                        @* Đoạn chat *@
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @errorMessage
                            </div>
                        }
                        @if (messageList.Any())
                        {
                            @foreach (var message in messageList)
                            {
                                <div class="message-line d-flex flex-column @(message.UserSend == username ? "text-end" : "text-start")">
                                    <div class="d-flex @(message.UserSend == username ? "justify-content-end" : "align-items-end") mb-3">
                                        @* <div class="user-avatar">
                                             <img src="https://plhold.com/avatar/60?text=@message.UserSend" alt="Avatar of @message.UserSend" />
                                           </div> *@
                                    </div>
                                    <p class="message @(message.UserSend == username ? "ms-auto" : "")">
                                        @message.Content
                                        <small class="date d-flex @(message.UserSend == username ? "justify-content-start" : "justify-content-end") mt-3">
                                            @message.CreatedDate.ToString("HH:mm dd/MM/yyyy")
                                        </small>
                                    </p>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="justify-content:center;">Chưa có tin nhắn nào.</p>
                        }

                    </div>
                    <div class="inputs mt-auto">
                        <div class="input-group mb-3">
                            <input type="text" class="form-control" placeholder="Nhập tinh nhắn" aria-label="Nhắn tin" aria-describedby="button-addon2" @bind="messageContent">
                            <button class="btn btn-outline-secondary" type="button" id="button-addon2" @onclick="SendMessage" disabled="@string.IsNullOrWhiteSpace(selectedUser)"><i class="fas fa-paper-plane"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8" crossorigin="anonymous"></script>


@code{
    private string searchTerm = string.Empty; // Từ khóa tìm kiếm
    private string selectedFilter = string.Empty; // Bộ lọc
    private List<Conversation> filteredConversationList = new();
    private string productName;

    private bool isLoading = true;
    private string errorMessage;
    private AccountInfoDto accountInfo;
    private bool IsLoggedIn { get; set; } = false;
    private List<Conversation> conversationList = new();
    private List<Messages> messageList = new();
    private string username; // Tên người dùng đăng nhập
    private string selectedUser;
    private string messageContent;
    private System.Timers.Timer refreshTimer;

    // Khởi tạo khi component được render lần đầu
    protected override async Task OnInitializedAsync()
    {
        await CheckTokenAndLoadAccountInfo();
        if (IsLoggedIn)
        {
            await LoadConversations();
            filteredConversationList = conversationList;
            StartAutoRefresh(); // Khởi động cơ chế tự động làm mới
        }
    }

    // Hàm kiểm tra token và tải thông tin người dùng
    private async Task CheckTokenAndLoadAccountInfo()
    {
        var token = await jsruntime.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await LoadAccountInfo();
        }
        else
        {
            isLoading = false;
            IsLoggedIn = false;
        }
    }

    // Hàm tải thông tin tài khoản
    private async Task LoadAccountInfo()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await http.GetAsync("api/User/GetMyInfo");

            if (response.IsSuccessStatusCode)
            {
                accountInfo = await response.Content.ReadFromJsonAsync<AccountInfoDto>();
                username = accountInfo.UserName; // Lấy username
                IsLoggedIn = true;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Lỗi: {response.StatusCode} - {errorContent}";
                IsLoggedIn = false;
                await Logout();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra khi lấy thông tin tài khoản: " + ex.Message;
            IsLoggedIn = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    // Hàm tải danh sách hội thoại
    private async Task LoadConversations()
    {
        try
        {
            conversationList = await http.GetFromJsonAsync<List<Conversation>>($"api/Conversation/GetConversations/{username}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải danh sách hội thoại: {ex.Message}");
        }
    }

    // Hàm tải danh sách tin nhắn
    private async Task LoadMessages(Conversation conversation)
    {
        try
        {
            selectedUser = conversation.Username == username ? conversation.UserGive : conversation.Username;
            var url = $"api/Message/GetMessagesBetween?username={username}&selectedUser={selectedUser}";
            messageList = await http.GetFromJsonAsync<List<Messages>>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải tin nhắn: {ex.Message}");
        }
    }

    // Gửi tin nhắn
    private async Task SendMessage()
    {
        try
        {
            var conversation = conversationList.FirstOrDefault(c =>
                (c.Username == username && c.UserGive == selectedUser) ||
                (c.Username == selectedUser && c.UserGive == username));

            if (conversation == null || conversation.ConversationID <= 0)
            {
                Console.WriteLine("Không tìm thấy hội thoại hoặc ConversationID không hợp lệ.");
                return;
            }

            var newMessage = new Messages
                {
                    ConversationID = conversation.ConversationID,
                    UserSend = username,
                    Content = messageContent,
                    TypeContent = "Text",
                    CreatedDate = DateTime.Now,
                    IsDeleted = false,
                    Status = "Sent",
                };

            var response = await http.PostAsJsonAsync($"api/Message/CreateMess?username={username}&userGive={selectedUser}", newMessage);

            if (response.IsSuccessStatusCode)
            {
                await LoadMessages(conversation);
                messageContent = string.Empty;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Gửi tin nhắn thất bại: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi gửi tin nhắn: {ex.Message}");
        }
    }

    private void StartAutoRefresh()
    {
        refreshTimer = new System.Timers.Timer(3000); // 3 giây
        refreshTimer.Elapsed += async (sender, e) => await RefreshData();
        refreshTimer.AutoReset = true;
        refreshTimer.Start();
    }

    private async Task RefreshData()
    {
        await InvokeAsync(async () =>
        {
            await LoadConversations(); // Làm mới hội thoại
            if (!string.IsNullOrEmpty(selectedUser)) // Nếu đã chọn người dùng, làm mới tin nhắn
            {
                var selectedConversation = conversationList.FirstOrDefault(c =>
                    (c.Username == username && c.UserGive == selectedUser) ||
                    (c.Username == selectedUser && c.UserGive == username));
                if (selectedConversation != null)
                {
                    await LoadMessages(selectedConversation);
                }
            }
            StateHasChanged(); // Cập nhật UI
        });
    }

    public void Dispose()
    {
        if (refreshTimer != null)
        {
            refreshTimer.Stop();
            refreshTimer.Dispose();
        }
    }

    private async Task Logout()
    {
        await jsruntime.InvokeVoidAsync("localStorage.removeItem", "token");
        IsLoggedIn = false;
        accountInfo = null;
        Navigation.NavigateTo("/", forceLoad: true);
    }

    private class AccountInfoDto
    {
        public string UserName { get; set; }
        public decimal PreSystem { get; set; }
        public string FullName { get; set; }
        public string PhoneNumber { get; set; }
        public string Gender { get; set; }
        public DateTime? Birthday { get; set; }
        public string ImageAccount { get; set; }
    }
}