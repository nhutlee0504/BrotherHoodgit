@page "/NhanTin"
@using SanGiaoDich_BrotherHood.Shared.Models
@inject HttpClient http
@inject IJSRuntime jsruntime
@inject NavigationManager Navigation
<style>
    /* Giao diện toàn màn hình cho chat */
    .chat-container {
        display: flex;
        height: 100vh;
    }

    /* Danh sách người dùng */
    .users-list {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 260px;
        background-color: #f0f2f5;
        border-right: 1px solid #ddd;
        height: 100%;
        overflow-y: auto;
    }

        .users-list .user-profile {
            display: flex;
            align-items: center;
            padding: 15px;
            cursor: pointer;
            border-bottom: 1px solid #ddd;
            transition: background-color 0.3s;
        }

            .users-list .user-profile:hover {
                background-color: #e5e5e5;
            }

        .users-list .user-avatar img {
            border-radius: 50%;
            width: 50px;
            height: 50px;
            margin-right: 15px;
        }

        .users-list .user-name {
            font-weight: bold;
            color: #333;
        }

    /* Chat Frame */
    .chat-frame {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        background-color: #fff;
        padding: 20px;
        height: 100%;
        overflow: hidden;
    }

    /* Header chat */
    .chat-header {
        display: flex;
        align-items: center;
        border-bottom: 1px solid #ddd;
        padding-bottom: 10px;
        margin-bottom: 15px;
    }

        .chat-header .user-avatar img {
            width: 50px;
            height: 50px;
            border-radius: 50%;
        }

        .chat-header .user-name {
            margin-left: 10px;
            font-size: 18px;
            font-weight: bold;
        }

    /* Tin nhắn */
    .message-history {
        flex-grow: 1;
        overflow-y: auto;
        padding: 10px;
        margin-bottom: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        max-height: 65%;
    }

    .message-line {
        display: flex;
        flex-direction: column;
        margin-bottom: 15px;
    }

        .message-line.text-end .message {
            align-self: flex-end;
            background-color: #4caf50;
            color: #fff;
            border-radius: 10px 10px 0 10px;
            padding: 12px 18px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .message-line.text-start .message {
            align-self: flex-start;
            background-color: #fff;
            color: #333;
            border-radius: 10px 10px 10px 0;
            padding: 12px 18px;
            max-width: 80%;
            border: 1px solid #ddd;
            word-wrap: break-word;
        }

    /* Tin nhắn - thời gian */
    .date {
        font-size: 12px;
        color: #bbb;
        margin-top: 5px;
    }

    /* Khung nhập tin nhắn */
    .inputs {
        display: flex;
        align-items: center;
        padding: 10px;
        background-color: #f0f2f5;
        border-radius: 30px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    }

        .inputs .form-control {
            flex-grow: 1;
            border-radius: 20px;
            padding: 10px 15px;
            border: 1px solid #ddd;
            outline: none;
            box-shadow: none;
            font-size: 14px;
        }

        .inputs .btn {
            background-color: #4caf50;
            color: white;
            border-radius: 50%;
            padding: 10px;
            margin-left: 10px;
            cursor: pointer;
            border: none;
            transition: background-color 0.2s ease;
        }

            .inputs .btn:hover {
                background-color: #45a049;
            }

        .inputs .form-control::placeholder {
            color: #bbb;
        }

    .message-history::-webkit-scrollbar {
        width: 8px;
    }

    .message-history::-webkit-scrollbar-thumb {
        background-color: #4caf50;
        border-radius: 5px;
    }

    .message-history::-webkit-scrollbar-track {
        background-color: #f9f9f9;
    }

</style>
<div class="chat-container">
    <!-- Sidebar người dùng -->
    <div class="users-list">
        <ul>
            @foreach (var conversation in filteredConversationList)
            {
                var otherUser = conversation.Username == username ? conversation.UserGive : conversation.Username;
                var userInfo = userInfoCache.ContainsKey(otherUser) ? userInfoCache[otherUser] : ("default-image.png", "Unknown User");

                <li class="user-profile" @onclick="() => { LoadMessages(conversation); HideSidebar(); }">
                    <div class="user-avatar">
                        <img src="@userInfo.Item1" alt="User Image" class="rounded-circle" />
                    </div>
                    <div class="user-name">
                        @userInfo.Item2
                    </div>
                </li>
            }
        </ul>
    </div>

    <!-- Khung chat -->
    <div class="chat-frame">
        <!-- Header Chat -->
        <div class="chat-header">
            <div class="user-avatar">
                <img src="@selectedUserImage" alt="User Avatar" class="rounded-circle" />
            </div>
            <div class="user-name">
                @selectedUser
            </div>
        </div>

        <!-- Tin nhắn -->
        <div class="message-history">
            @if (messageList.Any())
            {
                @foreach (var message in messageList)
                {
                    <div class="message-line @(message.UserSend == username ? "text-end" : "text-start")">
                        <p class="message">
                            @message.Content
                            <small class="date">@message.CreatedDate.ToString("HH:mm dd/MM/yyyy")</small>
                        </p>
                    </div>
                }
            }
            else
            {
                <p class="text-center">Chưa có tin nhắn nào.</p>
            }
        </div>

        <!-- Nhập tin nhắn -->
        <div class="inputs">
            <input type="text" class="form-control" placeholder="Nhập tin nhắn" @bind="messageContent">
            <button class="btn" @onclick="SendMessage" disabled="@string.IsNullOrWhiteSpace(selectedUser)">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>


<script>
    function ToggleSidebar() {
        const chatBox = document.getElementById('ChatBox');
        chatBox.classList.toggle('sidebar-visible');
    }


    function HideSidebar() {
        const chatBox = document.getElementById('ChatBox');
        chatBox.classList.remove('sidebar-visible');
    }
</script>



@code{
    private string searchTerm = string.Empty; 
    private string selectedFilter = string.Empty;
    private List<Conversation> filteredConversationList = new();
    private string productName;

    private bool isLoading = true;
    private string errorMessage;
    private AccountInfoDto accountInfo;
    private bool IsLoggedIn { get; set; } = false;
    private List<Conversation> conversationList = new();
    private List<Messages> messageList = new();
    private string username;
    private string selectedUserImage;
    private string selectedUser;
    private string messageContent;
    private System.Timers.Timer refreshTimer;
    protected override async Task OnInitializedAsync()
    {
        await CheckTokenAndLoadAccountInfo();
        if (IsLoggedIn)
        {
            await LoadConversations();
            filteredConversationList = conversationList;
            StartAutoRefresh(); // Khởi động cơ chế tự động làm mới
        }
    }

    private void HideSidebar()
    {
        // Gọi JavaScript để ẩn sidebar
        jsruntime.InvokeVoidAsync("ToggleSidebar");
    }

    // Các phương thức và biến khác như LoadMessages, messageList...
    // Hàm kiểm tra token và tải thông tin người dùng
    private async Task CheckTokenAndLoadAccountInfo()
    {
        var token = await jsruntime.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await LoadAccountInfo();
        }
        else
        {
            isLoading = false;
            IsLoggedIn = false;
        }
    }
    private async Task LoadAccountInfo()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await http.GetAsync("api/User/GetMyInfo");

            if (response.IsSuccessStatusCode)
            {
                accountInfo = await response.Content.ReadFromJsonAsync<AccountInfoDto>();
                username = accountInfo.UserName;
                IsLoggedIn = true;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Lỗi: {response.StatusCode} - {errorContent}";
                IsLoggedIn = false;
                await Logout();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra khi lấy thông tin tài khoản: " + ex.Message;
            IsLoggedIn = false;
        }
        finally
        {
            isLoading = false;
        }
    }
    private Dictionary<string, (string Image, string FullName)> userInfoCache = new();

    private async Task LoadConversations()
    {
        try
        {

            conversationList = await http.GetFromJsonAsync<List<Conversation>>($"api/Conversation/GetConversations/{username}");

            foreach (var conversation in conversationList)
            {

                var otherUser = conversation.Username == username ? conversation.UserGive : conversation.Username;

     
                if (!userInfoCache.ContainsKey(otherUser))
                {
                    var (image, fullName) = await GetUserInfoFromAccount(otherUser);

                    // Lưu vào cache
                    userInfoCache[otherUser] = (image, fullName);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải danh sách hội thoại: {ex.Message}");
        }
    }

    private async Task<(string Image, string FullName)> GetUserInfoFromAccount(string username)
    {
        try
        {
            var response = await http.GetAsync($"api/User/GetAccountInfoByName/{username}");
            if (response.IsSuccessStatusCode)
            {
                var account = await response.Content.ReadFromJsonAsync<Account>();
                var image = account?.ImageAccount ?? "default-image.png";
                var fullName = account?.FullName ?? "Unknown User"; 
                return (image, fullName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi lấy thông tin cho {username}: {ex.Message}");
        }
        return ("default-image.png", "Unknown User");
    }

    public class Account
    {
        public string Username { get; set; }
        public string ImageAccount { get; set; }
        public string FullName { get; set; }  // Thêm thuộc tính FullName
    }

    private async Task LoadMessages(Conversation conversation)
    {
        try
        {
            // Xác định người dùng được chọn
            selectedUser = conversation.Username == username ? conversation.UserGive : conversation.Username;

            // Lấy thông tin ảnh từ userInfoCache
            if (userInfoCache.ContainsKey(selectedUser))
            {
                selectedUserImage = userInfoCache[selectedUser].Image;
            }
            else
            {
                // Nếu chưa có trong cache, tải thông tin người dùng
                var userInfo = await GetUserInfoFromAccount(selectedUser);
                selectedUserImage = userInfo.Image;
                userInfoCache[selectedUser] = userInfo; // Cập nhật vào cache
            }

            // Tải danh sách tin nhắn
            var url = $"api/Message/GetMessagesBetween?username={username}&selectedUser={selectedUser}";
            messageList = await http.GetFromJsonAsync<List<Messages>>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải tin nhắn: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        try
        {
            var conversation = conversationList.FirstOrDefault(c =>
                (c.Username == username && c.UserGive == selectedUser) ||
                (c.Username == selectedUser && c.UserGive == username));

            if (conversation == null || conversation.ConversationID <= 0)
            {
                Console.WriteLine("Không tìm thấy hội thoại hoặc ConversationID không hợp lệ.");
                return;
            }

            var newMessage = new Messages
                {
                    ConversationID = conversation.ConversationID,
                    UserSend = username,
                    Content = messageContent,
                    TypeContent = "Text",
                    CreatedDate = DateTime.Now,
                    IsDeleted = false,
                    Status = "Sent",
                };

            var response = await http.PostAsJsonAsync($"api/Message/CreateMess?username={username}&userGive={selectedUser}", newMessage);

            if (response.IsSuccessStatusCode)
            {
                await LoadMessages(conversation);
                messageContent = string.Empty;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Gửi tin nhắn thất bại: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi gửi tin nhắn: {ex.Message}");
        }
    }

    private void StartAutoRefresh()
    {
        refreshTimer = new System.Timers.Timer(3000); // 3 giây
        refreshTimer.Elapsed += async (sender, e) => await RefreshData();
        refreshTimer.AutoReset = true;
        refreshTimer.Start();
    }

    private async Task RefreshData()
    {
        await InvokeAsync(async () =>
        {
            await LoadConversations();
            if (!string.IsNullOrEmpty(selectedUser)) 
            {
                var selectedConversation = conversationList.FirstOrDefault(c =>
                    (c.Username == username && c.UserGive == selectedUser) ||
                    (c.Username == selectedUser && c.UserGive == username));
                if (selectedConversation != null)
                {
                    await LoadMessages(selectedConversation);
                }
            }
            StateHasChanged(); // Cập nhật UI
        });
    }

    public void Dispose()
    {
        if (refreshTimer != null)
        {
            refreshTimer.Stop();
            refreshTimer.Dispose();
        }
    }

    private async Task Logout()
    {
        await jsruntime.InvokeVoidAsync("localStorage.removeItem", "token");
        IsLoggedIn = false;
        accountInfo = null;
        Navigation.NavigateTo("/", forceLoad: true);
    }

    private class AccountInfoDto
    {
        public string UserName { get; set; }
        public decimal PreSystem { get; set; }
        public string FullName { get; set; }
        public string PhoneNumber { get; set; }
        public string Gender { get; set; }
        public DateTime? Birthday { get; set; }
        public string ImageAccount { get; set; }
    }
}