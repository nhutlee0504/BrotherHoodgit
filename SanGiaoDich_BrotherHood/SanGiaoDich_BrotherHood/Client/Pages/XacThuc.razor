@page "/image"
@using System.Text.Json
@using System.Text
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3>Quét hình ảnh</h3>
<InputFile OnChange="HandleFileSelected" accept="image/*" id="fileInput" />
<p>@resultMessage</p>

@code {
    private string apiKey = "AIzaSyAgNPZpXYkrNT1dowBC0JM5wFHPoKxPCfo";
    private string resultMessage;
    private const long MaxFileSize = 5 * 1024 * 1024;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null)
        {
            resultMessage = "Vui lòng chọn một file.";
            return;
        }

        var file = e.File;
        // Kiểm tra kích thước file
        if (file.Size > MaxFileSize)
        {
            resultMessage = "File vượt quá kích thước tối đa (5MB).";
            await ResetFileInput(); // Reset input
            return;
        }

        // Kiểm tra định dạng file
        var allowedFormats = new[] { "image/jpeg", "image/png", "image/gif" };
        if (!allowedFormats.Contains(file.ContentType))
        {
            resultMessage = "Chỉ chấp nhận định dạng ảnh JPEG, PNG, hoặc GIF.";
            await ResetFileInput();
            return;
        }

        try
        {
            // Đọc file và chuyển thành Base64
            using var stream = file.OpenReadStream();
            var buffer = new byte[file.Size];
            await stream.ReadAsync(buffer, 0, (int)file.Size);
            var base64Image = Convert.ToBase64String(buffer);

            // Gửi ảnh tới Google Vision API
            var analysisResult = await CallGoogleVisionApi(base64Image);
            if (analysisResult != "Ảnh an toàn và đã được chấp nhận.")
            {
                resultMessage = analysisResult;
                await ResetFileInput();
                return;
            }

            resultMessage = "Ảnh hợp lệ và đã được tải lên.";
        }
        catch (Exception ex)
        {
            resultMessage = $"Lỗi: {ex.Message}";
            await ResetFileInput();
        }
    }

    private async Task<string> CallGoogleVisionApi(string base64Image)
    {
        try
        {
            var request = new
            {
                requests = new[]
                {
                    new
                    {
                        image = new { content = base64Image },
                        features = new[]
                        {
                            new { type = "LABEL_DETECTION" },
                            new { type = "SAFE_SEARCH_DETECTION" }
                        }
                    }
                }
            };

            var jsonRequest = JsonSerializer.Serialize(request);
            var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

            var response = await Http.PostAsync($"https://vision.googleapis.com/v1/images:annotate?key={apiKey}", content);
            if (!response.IsSuccessStatusCode)
            {
                return $"Lỗi khi gọi API: {response.StatusCode}";
            }

            var jsonResponse = await response.Content.ReadAsStringAsync();
            return AnalyzeApiResponse(jsonResponse);
        }
        catch (Exception ex)
        {
            return $"Lỗi: {ex.Message}";
        }
    }

    private string AnalyzeApiResponse(string jsonResponse)
    {
        try
        {
            var result = JsonSerializer.Deserialize<VisionApiResponse>(jsonResponse);
            if (result?.Responses == null || result.Responses.Length == 0)
            {
                return "Không có phản hồi từ API.";
            }

            var safeSearch = result.Responses[0].SafeSearchAnnotation;
            var labels = result.Responses[0].LabelAnnotations;

            // Kiểm tra nội dung nhạy cảm
            if (safeSearch != null && (safeSearch.Adult == "LIKELY" || safeSearch.Adult == "VERY_LIKELY" ||
                                       safeSearch.Violence == "LIKELY" || safeSearch.Violence == "VERY_LIKELY" ||
                                       safeSearch.Racy == "LIKELY" || safeSearch.Racy == "VERY_LIKELY"))
            {
                return "Ảnh chứa nội dung nhạy cảm và không được phép thêm.";
            }

            // Kiểm tra vũ khí
            if (labels != null)
            {
                foreach (var label in labels)
                {
                    if (label.Description.Contains("gun", StringComparison.OrdinalIgnoreCase) ||
                        label.Description.Contains("weapon", StringComparison.OrdinalIgnoreCase) ||
                        label.Description.Contains("firearm", StringComparison.OrdinalIgnoreCase))
                    {
                        return "Ảnh chứa vũ khí và không được phép thêm.";
                    }
                }
            }

            return "Ảnh an toàn và đã được chấp nhận.";
        }
        catch (Exception ex)
        {
            return $"Lỗi khi xử lý JSON: {ex.Message}";
        }
    }

    // Gọi JavaScript để reset input file
    private async Task ResetFileInput()
    {
        await JSRuntime.InvokeVoidAsync("resetFileInput", "fileInput");
    }

    public class VisionApiResponse
    {
        [JsonPropertyName("responses")]
        public Response[] Responses { get; set; }

        public class Response
        {
            [JsonPropertyName("safeSearchAnnotation")]
            public SafeSearchAnnotations SafeSearchAnnotation { get; set; }

            [JsonPropertyName("labelAnnotations")]
            public LabelAnnotation[] LabelAnnotations { get; set; }

            public class SafeSearchAnnotations
            {
                [JsonPropertyName("adult")]
                public string Adult { get; set; }

                [JsonPropertyName("violence")]
                public string Violence { get; set; }

                [JsonPropertyName("racy")]
                public string Racy { get; set; }
            }

            public class LabelAnnotation
            {
                [JsonPropertyName("description")]
                public string Description { get; set; }
            }
        }
    }
}
<script>
    function resetFileInput(fileInputId) {
        const fileInput = document.getElementById(fileInputId);
        if (fileInput) {
            fileInput.value = '';  // Reset file input value
        }
    }
</script>
