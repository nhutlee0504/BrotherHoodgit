@layout AdminLayout
@page "/Admin/Product/{ProductId:int}"
@using SanGiaoDich_BrotherHood.Shared.Models
@inject HttpClient httpclient
@inject IJSRuntime JSRuntime

<h1>@product.Name</h1>

<div>
    <strong>Category:</strong> @product.Category.NameCate
</div>

<div>
    <strong>Số lượng:</strong> @product.Quantity
</div>

<div>
    <strong>Giá:</strong> @product.Price.ToString("C")
</div>

<div>
    <strong>Mô tả:</strong> @product.Description
</div>

<div>
    <strong>Trạng thái:</strong> @product.Status
</div>

<div>
    <strong>Ngày bắt đầu:</strong> @product.StartDate
</div>

<div>
    <strong>Ngày kết thúc:</strong> @product.EndDate?.ToString("dd/MM/yyyy")
</div>

<div>
    <strong>Priority Level:</strong> @product.ProrityLevel
</div>

<div>
    <strong>Ngày tạo:</strong> @product.CreatedDate
</div>

<div>
    <strong>Ngày cập nhật:</strong> @product.UpdatedDate
</div>

<div>
    <strong>Account Accept:</strong> @product.AccountAccept
</div>

@if (!string.IsNullOrEmpty(product.Reason))
{
    <div>
        <strong>Lý do hủy:</strong> @product.Reason
    </div>
}


@code {
    [Parameter] public int ProductId { get; set; }
    private Product product;
    private string categoryName;
    private Account user;
    private List<ImageProduct> images;
    private string errorMessage;
    private bool isFavorite = false;  // Trạng thái yêu thích của sản phẩm

    protected override async Task OnInitializedAsync()
    {
        try
        {
            product = await GetProductById(ProductId);
            if (product != null)
            {
                categoryName = await GetCategoryNameById(product.IDCategory);
                user = await GetSellerByUsername(product.UserName);
                images = await GetImagesByProductId(product.IDProduct);
            }

            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                await CheckFavoriteStatus();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message; // Ghi lại thông điệp lỗi
        }
    }

    private async Task<Product> GetProductById(int id)
    {
        var response = await httpclient.GetAsync($"api/product/GetProductById/{id}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<Product>();
        }
        throw new Exception("Không thể lấy dữ liệu sản phẩm");
    }

    private async Task<string> GetCategoryNameById(int idCategory)
    {
        var response = await httpclient.GetAsync($"api/category/GetCategoryByID/{idCategory}");
        if (response.IsSuccessStatusCode)
        {
            var category = await response.Content.ReadFromJsonAsync<Category>();
            return category?.NameCate;
        }
        return null;
    }

    private async Task<Account> GetSellerByUsername(string username)
    {
        if (string.IsNullOrEmpty(username))
        {
            return null;
        }
        return await httpclient.GetFromJsonAsync<Account>($"api/user/GetAccountInfoByName/{username}");
    }

    private async Task<List<ImageProduct>> GetImagesByProductId(int id)
    {
        var response = await httpclient.GetAsync($"api/ImageProduct/GetImageProduct/{id}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<ImageProduct>>() ?? new List<ImageProduct>();
        }
        else
        {
            errorMessage = "Không thể tải ảnh từ API: " + response.ReasonPhrase;
            return new List<ImageProduct>();
        }
    }

    private async Task CheckFavoriteStatus()
    {
        var response = await httpclient.GetAsync("api/favorite/GetFavoriteAccount");
        if (response.IsSuccessStatusCode)
        {
            var favoriteList = await response.Content.ReadFromJsonAsync<List<Product>>();
            isFavorite = favoriteList.Any(fav => fav.IDProduct == ProductId);
        }
        else
        {
            errorMessage = "Không thể lấy danh sách yêu thích.";
        }
    }

    private async Task ToggleFavorite(ChangeEventArgs e)
    {
        isFavorite = (bool)e.Value;

        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        if (!string.IsNullOrEmpty(token))
        {
            if (isFavorite)
            {
                var response = await httpclient.GetAsync($"api/favorite/AddFavorite/{ProductId}");

                if (response.IsSuccessStatusCode)
                {
                    // Thêm vào danh sách yêu thích thành công
                }
                else
                {
                    errorMessage = "Không thể thêm sản phẩm vào danh sách yêu thích.";
                }
            }
            else
            {
                await httpclient.DeleteAsync($"api/favorite/DeleteFavorite/{ProductId}");
            }
        }
        else
        {
            errorMessage = "Bạn cần đăng nhập để thực hiện hành động này.";
        }
    }
}
