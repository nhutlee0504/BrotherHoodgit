@page "/admin/nhanvien"
@layout AdminLayout
@inject HttpClient httpClient
@using SanGiaoDich_BrotherHood.Shared.Models
@inject NavigationManager NavigationManager
@using SanGiaoDich_BrotherHood.Shared.Dto
<style>
    /* Tùy chỉnh thanh tìm kiếm - Nằm về bên trái */
    .d-flex.align-items-center {
        display: flex;
        align-items: center;
        gap: 10px; /* Khoảng cách giữa input và các nút */
        justify-content: flex-start; /* Đưa phần tìm kiếm về bên trái */
        margin-bottom: 15px; /* Khoảng cách với bảng */
    }

        .d-flex.align-items-center input {
            width: 250px;
            padding: 8px 10px;
            font-size: 14px;
            border: 1px solid #ced4da;
            border-radius: 8px;
            box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.075);
            transition: all 0.3s ease;
        }

        .d-flex.align-items-center button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            font-size: 14px;
            transition: background-color 0.3s ease;
        }

            .d-flex.align-items-center button.btn-primary {
                background-color: #007bff;
            }

                .d-flex.align-items-center button.btn-primary:hover {
                    background-color: #0056b3;
                }

            .d-flex.align-items-center button:hover {
                background-color: #218838;
                color: #fff;
            }

    /* Bảng không viền và hàng đầu trong suốt */
    .table-striped-custom {
        border-collapse: collapse; /* Gộp các đường viền thành một */
        width: 100%;
    }

        .table-striped-custom th {
            background-color: transparent; /* Hàng đầu không có màu nền */
            color: #000; /* Màu chữ đen */
            text-align: center;
            padding: 12px;
            font-size: 16px;
            font-weight: bold;
            border: none; /* Xóa viền hàng đầu */
        }

        .table-striped-custom td {
            padding: 10px;
            text-align: left;
            font-size: 15px;
            border: none; /* Xóa viền trong bảng */
        }

        /* Màu xen kẽ cho bảng */
        .table-striped-custom tbody tr:nth-child(odd) {
            background-color: #f3f3f3; /* Xám nhạt */
        }

        .table-striped-custom tbody tr:nth-child(even) {
            background-color: #ffffff; /* Trắng */
        }
    /* Loại bỏ bóng bảng */
    .table-striped-custom {
        box-shadow: none;
    }
    /* Phân trang */
    .pagination {
        margin-top: 20px;
        justify-content: center;
    }

        .pagination .page-link {
            color: #007bff;
            font-weight: 500;
            padding: 8px 12px;
            border-radius: 5px;
            transition: background-color 0.3s ease;
            text-decoration: none;
        }

            .pagination .page-link:hover {
                background-color: #007bff;
                color: #fff;
            }

        .pagination .page-item.active .page-link {
            background-color: #28a745;
            color: #fff;
            border: none;
        }

    /* Modal */
    .modal-content {
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        background-color: #007bff;
        color: white;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        padding: 12px 20px;
    }

        .modal-header .btn-close {
            background: #fff;
            opacity: 0.5;
        }

    .modal-footer {
        padding: 12px 20px;
        border-bottom-left-radius: 8px;
        border-bottom-right-radius: 8px;
    }

        .modal-footer button {
            border-radius: 5px;
        }

    .modal-body {
        padding: 15px;
    }

    /* Thêm nhấn mạnh các biểu mẫu */
    input, select, textarea {
        border-radius: 8px;
        border: 1px solid #ccc;
        transition: border 0.3s ease;
        padding: 10px;
        font-size: 16px;
    }

        input:focus, select:focus, textarea:focus {
            border-color: #007bff;
            outline: none;
        }

    /* Nút đóng và button ở các modal */
    .btn-secondary, .btn-primary {
        border-radius: 5px;
        font-size: 16px;
        padding: 8px 15px;
        transition: background-color 0.3s ease;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: #fff;
    }

    .btn-primary {
        background-color: #007bff;
        color: #fff;
    }

    .btn-secondary:hover {
        background-color: #5a6268;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

</style>
<h3>Quản lý nhân viên</h3>

<!-- Thanh tìm kiếm -->
<div class="mb-3 d-flex align-items-center">
    <input @bind="searchKeyword" class="form-control" placeholder="Tìm kiếm nhân viên..." />
    <button class="btn btn-primary" @onclick="OnSearchKeywordChanged">Tìm kiếm</button>
    <button class="btn btn-success" @onclick="ShowAddEmployeeModal">Thêm nhân viên</button>
</div>


<!-- Danh sách nhân viên -->
@if (filteredEmployees == null)
{
    <p>Đang tải dữ liệu...</p>
}
else if (!filteredEmployees.Any())
{
    <p>Không tìm thấy nhân viên nào phù hợp.</p>
}
else
{
    <!-- Danh sách nhân viên -->
    <table class="table table-striped-custom table-bordered">
        <thead>
            <tr>
                <th>Tên đăng nhập</th>
                <th>Họ và tên</th>
                <th>Email</th>
                <th>Số điện thoại</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in PagedEmployees)
            {
                <tr>
                    <td>@employee.UserName</td>
                    <td>@employee.FullName</td>
                    <td>@employee.Email</td>
                    <td>@employee.PhoneNumber</td>
                </tr>
            }
        </tbody>
    </table>    <!-- Phân trang -->
    <nav aria-label="Phân trang" class="mt-3">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="PreviousPage">Trước</button>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="NextPage">Sau</button>
            </li>
        </ul>
    </nav>
}

<!-- Modal Thêm Nhân Viên -->
@if (isAddEmployeeModalVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thêm nhân viên</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddEmployeeModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Tên đăng nhập</label>
                        <input class="form-control" @bind="newEmployee.UserName" placeholder="Nhập tên đăng nhập" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Mật khẩu</label>
                        <input class="form-control" @bind="newEmployee.Password" type="password" placeholder="Nhập mật khẩu" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Xác nhận mật khẩu</label>
                        <input class="form-control" @bind="newEmployee.ConformPassword" type="password" placeholder="Nhập lại mật khẩu" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Quyền</label>
                        <select class="form-select" @bind="selectedRole">
                            <option value="" disabled selected>Chọn quyền</option>
                            @foreach (var role in roles)
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseAddEmployeeModal">Đóng</button>
                    <button class="btn btn-primary" @onclick="AddEmployee" disabled="@string.IsNullOrWhiteSpace(selectedRole)">Thêm</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal Thông Báo -->
@if (isModalVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <p>@modalMessage</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Account> employees;
    private List<Account> filteredEmployees;
    private string searchKeyword = string.Empty;

    // Biến cho modal thêm nhân viên
    private bool isAddEmployeeModalVisible = false;
    private Account newEmployee = new Account();
    private string selectedRole;
    private List<string> roles = new() { "Admin", "Nhân viên" };

    // Biến modal thông báo
    private bool isModalVisible = false;
    private string modalTitle;
    private string modalMessage;

    // Biến cho phân trang
    private int currentPage = 1;
    private int pageSize = 10; // Số nhân viên mỗi trang
    private int totalPages => (int)Math.Ceiling((double)filteredEmployees.Count / pageSize);

    private List<Account> PagedEmployees =>
        filteredEmployees.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();

    public class Account
    {
        public string UserName { get; set; }
        public string FullName { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public string Role { get; set; } // Quyền
        public string Password { get; set; }
        public string ConformPassword { get; set; } // Xác nhận mật khẩu
    }
    public class RegisterDto
    {
        public string UserName { get; set; }
        public string Password { get; set; }
        public string ConformPassword { get; set; }
        public string Role { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        try
        {
            // Gọi API quản trị viên để lấy tất cả tài khoản
            employees = await httpClient.GetFromJsonAsync<List<Account>>("api/user/GetAccounts");

            if (employees != null && employees.Any())
            {
                filteredEmployees = employees
                    .Where(e => e.Role.Equals("Nhân viên", StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            ShowModal("Lỗi", $"Không thể tải danh sách nhân viên: {ex.Message}");
        }
    }

    private void OnSearchKeywordChanged()
    {
        if (string.IsNullOrWhiteSpace(searchKeyword))
        {
            filteredEmployees = employees
                .Where(e => e.Role.Equals("Nhân viên", StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            filteredEmployees = employees
                .Where(e => e.Role.Equals("Nhân Viên", StringComparison.OrdinalIgnoreCase) &&
                           ((e.UserName?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (e.FullName?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (e.Email?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (e.PhoneNumber?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false)))
                .ToList();
        }
    }

    private void ShowAddEmployeeModal()
    {
        isAddEmployeeModalVisible = true;
        newEmployee = new Account();
        selectedRole = null;
    }

    private void CloseAddEmployeeModal()
    {
        isAddEmployeeModalVisible = false;
    }

    private async Task AddEmployee()
    {
        try
        {
            // Kiểm tra mật khẩu và xác nhận mật khẩu có khớp không
            if (newEmployee.Password != newEmployee.ConformPassword)
            {
                ShowModal("Lỗi", "Mật khẩu và xác nhận mật khẩu không khớp.");
                return;
            }

            // Tạo đối tượng RegisterDto
            var registerDto = new RegisterDto
                {
                    UserName = newEmployee.UserName,
                    Password = newEmployee.Password,
                    ConformPassword = newEmployee.ConformPassword,
                    Role = selectedRole
                };

            // Gửi yêu cầu đăng ký tài khoản mới
            await httpClient.PostAsJsonAsync("api/admin/RegisterAccount", registerDto);

            ShowModal("Thành công", "Nhân viên mới đã được thêm.");
            await LoadEmployees();
            CloseAddEmployeeModal();
        }
        catch (Exception ex)
        {
            ShowModal("Lỗi", $"Không thể thêm nhân viên: {ex.Message}");
        }
    }


    private void ShowModal(string title, string message)
    {
        modalTitle = title;
        modalMessage = message;
        isModalVisible = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }
    private void GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= totalPages)
        {
            currentPage = pageNumber;
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }
}
