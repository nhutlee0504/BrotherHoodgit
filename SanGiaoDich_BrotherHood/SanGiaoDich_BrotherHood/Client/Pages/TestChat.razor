@page "/testchat"
@inject IJSRuntime jsruntime
@inject HttpClient http
@inject NavigationManager NavigationManager

<h3>Test Chat</h3>

<div class="chat-container">
    <div class="user-list">
        <h4>Người dùng có thể nhắn tin</h4>
        <ul>
            @if (isLoading)
            {
                <li>Đang tải...</li>
            }
            else if (errorMessage != null)
            {
                <li class="error">@errorMessage</li>
            }
            else if (availableUsers?.Count > 0)
            {
                foreach (var user in availableUsers)
                {
                    <li @onclick="(() => SelectUser(user))" class="user-item">
                        @user.UserName
                    </li>
                }
            }
            else
            {
                <li>Không có người dùng nào để nhắn tin.</li>
            }
        </ul>
    </div>

    <div class="chat-content">
        @if (selectedUser != null)
        {
            <h4>Đang nhắn tin với: @selectedUser</h4>
            <div class="messages">
                @if (messages?.Count > 0)
                {
                    foreach (var message in messages)
                    {
                        <div class="message @(message.UserSend == accountInfo.UserName ? "sent" : "received")">
                            <span><strong>@message.UserSend:</strong> @message.Content</span>
                            <span class="message-time">@message.CreatedDate</span>
                        </div>
                    }
                }
                else
                {
                    <div class="no-messages">Chưa có tin nhắn nào.</div>
                }
            </div>

            <div class="message-input">
                <textarea @bind="newMessage" placeholder="Nhập tin nhắn..." rows="2"></textarea>
                <button @onclick="SendMessage" disabled="@string.IsNullOrWhiteSpace(newMessage)">Gửi</button>
            </div>
        }
        else
        {
            <h4>Chọn một người dùng để bắt đầu trò chuyện</h4>
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private string errorMessage;
    private AccountInfoDto accountInfo;
    private bool IsLoggedIn { get; set; } = false;

    private List<UserDto> availableUsers = new();
    private string selectedUser;
    private List<MessageDto> messages = new();
    private string newMessage;

    private int selectedConversationId = 0;

    protected override async Task OnInitializedAsync()
    {
        http.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
        await CheckTokenAndLoadAccountInfo();

        if (IsLoggedIn)
        {
            await LoadAvailableUsers();
        }
    }

    private async Task CheckTokenAndLoadAccountInfo()
    {
        var token = await jsruntime.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await LoadAccountInfo();
        }
        else
        {
            isLoading = false;
        }
    }

    private async Task LoadAccountInfo()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await http.GetAsync("api/User/GetMyInfo");

            if (response.IsSuccessStatusCode)
            {
                accountInfo = await response.Content.ReadFromJsonAsync<AccountInfoDto>();
                IsLoggedIn = true;
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                IsLoggedIn = false;
                await Logout();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra: " + ex.Message;
            IsLoggedIn = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadAvailableUsers()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await http.GetAsync($"api/Message/get-conversations/{accountInfo.UserName}");

            if (response.IsSuccessStatusCode)
            {
                availableUsers = await response.Content.ReadFromJsonAsync<List<UserDto>>();

                foreach (var user in availableUsers)
                {
                    user.ConversationId = await GetConversationIdForUser(user.UserName);
                }
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<int> GetConversationIdForUser(string userName)
    {
        var user = availableUsers.FirstOrDefault(u => u.UserName == userName);
        return user?.ConversationId ?? 0;
    }

    private async Task SelectUser(UserDto user)
    {
        selectedUser = user.UserName;
        selectedConversationId = user.ConversationId; // Cập nhật ID cuộc trò chuyện
        await Task.Delay(5000); // Chờ 0.5 giây trước khi tải lại
        await LoadMessages();
    }

    private async Task LoadMessages()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await http.GetAsync($"api/Message/get-messages/{accountInfo.UserName}/{selectedUser}");

            if (response.IsSuccessStatusCode)
            {
                messages = await response.Content.ReadFromJsonAsync<List<MessageDto>>();

                // Thêm log kiểm tra dữ liệu
                Console.WriteLine($"Số tin nhắn: {messages?.Count}");
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage)) return;

        try
        {
            if (selectedConversationId == 0)
            {
                errorMessage = "Vui lòng chọn một cuộc trò chuyện để gửi tin nhắn.";
                return;
            }

            var messageDto = new SendMessageDto
                {
                    ConversationId = selectedConversationId,
                    UserSend = accountInfo.UserName,
                    Content = newMessage,
                    TypeContent = "Text"
                };

            var response = await http.PostAsJsonAsync("api/Message/send-message", messageDto);

            if (response.IsSuccessStatusCode)
            {
                newMessage = string.Empty;
                await LoadMessages();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra: " + ex.Message;
        }
    }

    private async Task Logout()
    {
        await jsruntime.InvokeVoidAsync("localStorage.removeItem", "token");
        IsLoggedIn = false;
        accountInfo = null;
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private class AccountInfoDto
    {
        public string UserName { get; set; }
        public decimal PreSystem { get; set; }
        public string FullName { get; set; }
        public string PhoneNumber { get; set; }
        public string Gender { get; set; }
        public DateTime? Birthday { get; set; }
        public string ImageAccount { get; set; }
    }

    private class MessageDto
    {
        public int MessageID { get; set; }
        public int ConversationID { get; set; }
        public string UserSend { get; set; }
        public string CreatedDate { get; set; } // Đảm bảo khớp với API (chữ cái đầu thường nếu cần)
        public string Content { get; set; }
        public string Status { get; set; }
        public bool IsDeleted { get; set; }
        public string TypeContent { get; set; }
    }

    private class SendMessageDto
    {
        public int ConversationId { get; set; }
        public string UserSend { get; set; }
        public string Content { get; set; }
        public string TypeContent { get; set; }
    }

    private class UserDto
    {
        public int Id { get; set; }
        public int ConversationId { get; set; }
        public string UserName { get; set; }
        public string JoinedDate { get; set; }
        public bool IsDeleted { get; set; }
    }
}
