@page "/bill"
@using SanGiaoDich_BrotherHood.Shared.Models
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime jsrunetime

<h3>Danh sách hóa đơn</h3>

<!-- Tìm kiếm -->
<div class="mb-3">
    <div class="row">
        <div class="col-md-6">
            <label for="searchByFullName">Tìm kiếm theo Họ và tên:</label>
            <input id="searchByFullName" type="text" @bind="searchFullName" class="form-control" placeholder="Nhập họ và tên" />
        </div>
        <div class="col-md-4">
            <label for="searchByIDBill">Tìm kiếm theo ID Hóa đơn:</label>
            <input id="searchByIDBill" type="number" @bind="searchIDBill" class="form-control" placeholder="Nhập ID hóa đơn" />
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-primary" @onclick="SearchBills">Tìm kiếm</button>
        </div>
    </div>
</div>

@if (bills == null)
{
    <p>Đang tải dữ liệu...</p>
}
else if (!bills.Any())
{
    <p>Không có hóa đơn nào.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>#</th>
                <th>Họ và tên</th>
                <th>Số điện thoại</th>
                <th>Địa chỉ giao hàng</th>
                <th>Ngày đặt hàng</th>
                <th>Hình thức thanh toán</th>
                <th>Tổng tiền</th>
                <th>Trạng thái</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bill in bills.Where(x => x.UserName == userName))
            {
                <tr>
                    <td>@bill.IDBill</td>
                    <td>@bill.FullName</td>
                    <td>@bill.PhoneNumber</td>
                    <td>@bill.DeliveryAddress</td>
                    <td>@bill.OrderDate.ToString("dd/MM/yyyy")</td>
                    <td>@bill.PaymentType</td>
                    <td>@bill.Total.ToString("C")</td>
                    <td>@bill.Status</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => NavigateToBillDetails(bill.IDBill)">Xem chi tiết</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string userName;
    private bool isLoading = true;
    private string errorMessage;
    private AccountInfoDto accountInfo;
    private bool IsLoggedIn { get; set; } = false; // Biến để theo dõi trạng thái đăng nhập
    private string searchQuery;
    private List<BillModel> bills;
    private List<BillModel> allBills;
    private string searchFullName;
    private int? searchIDBill;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await CheckTokenAndLoadAccountInfo();
            // Lấy tất cả hóa đơn khi trang được khởi tạo
            allBills = await httpClient.GetFromJsonAsync<List<BillModel>>("api/Bill/GetBill");
            bills = new List<BillModel>(allBills); // Hiển thị tất cả hóa đơn khi chưa tìm kiếm
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi khi tải dữ liệu: " + ex.Message);
            bills = new List<BillModel>();
        }
    }

    // Phương thức tìm kiếm hóa đơn
    private async Task SearchBills()
    {
        try
        {
            // Tìm kiếm theo họ và tên
            if (!string.IsNullOrWhiteSpace(searchFullName))
            {
                bills = await httpClient.GetFromJsonAsync<List<BillModel>>($"api/Bill/GetBillsByUserName/{searchFullName}");
            }
            // Tìm kiếm theo ID Hóa đơn
            else if (searchIDBill.HasValue)
            {
                var bill = await httpClient.GetFromJsonAsync<BillModel>($"api/Bill/GetBillsByIDBill/{searchIDBill.Value}");
                bills = bill != null ? new List<BillModel> { bill } : new List<BillModel>();
            }
            else
            {
                // Nếu không có điều kiện tìm kiếm, hiển thị tất cả hóa đơn
                bills = new List<BillModel>(allBills);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi khi tìm kiếm hóa đơn: " + ex.Message);
            bills = new List<BillModel>();
        }
    }

    // Điều hướng tới trang chi tiết hóa đơn
    private void NavigateToBillDetails(int IDBill)
    {
        NavigationManager.NavigateTo($"/Admin/BillDetails/{IDBill}");
    }

    // Class Bill mô tả thông tin hóa đơn
    public class BillModel
    {
        public int IDBill { get; set; }
        public string FullName { get; set; }
        public string PhoneNumber { get; set; }
        public string DeliveryAddress { get; set; }
        public DateTime OrderDate { get; set; }
        public string PaymentType { get; set; }
        public decimal Total { get; set; }
        public string Status { get; set; }
        public string UserName { get; set; }
    }

    private async Task CheckTokenAndLoadAccountInfo()
    {
        var token = await jsrunetime.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await LoadAccountInfo();
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private class AccountInfoDto
    {
        public string UserName { get; set; }
        public string FullName { get; set; }
        public string PhoneNumber { get; set; }
        public string Gender { get; set; }
        public DateTime? Birthday { get; set; }
        public string ImageAccount { get; set; }
    }

    private async Task LoadAccountInfo()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await httpClient.GetAsync("api/User/GetMyInfo");

            if (response.IsSuccessStatusCode)
            {
                var accountInfo = await response.Content.ReadFromJsonAsync<AccountInfoDto>();
                IsLoggedIn = true;
                userName = accountInfo.UserName;
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                IsLoggedIn = false;
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Có lỗi xảy ra: {ex.Message}";
            IsLoggedIn = false;
        }
        finally
        {
            isLoading = false;
        }
    }
}
