@page "/loginv2"
@using System.ComponentModel.DataAnnotations
@inject HttpClient http
@inject NavigationManager navigation
@inject IJSRuntime js
@using SanGiaoDich_BrotherHood.Shared.Dto
@using SanGiaoDich_BrotherHood.Shared.Models
@using System.Security.Cryptography
@using System.Text
<div class="container-fluid">
    <ul class="breadcrumb">
        <li class="breadcrumb-item"><a href="#"><i class="bi bi-house"></i> Trang chủ</a></li>
        <li class="breadcrumb-item"><a href="#">Đăng nhập</a></li>
    </ul>
</div>
<div class="container-fluid row justify-content-center align-items-center min-vh-100">
    <div class="col-md-1"></div>
    <div class="col-md-9">
        <div class="row">

            <div class="card mb-3 mx-auto" style="max-width: 900px;">
                <div class="row g-0">
                    <!-- Phần hình ảnh chiếm 100% bên trái -->
                    <div class="col-md-6 p-0">
                        <img src="/AnhGiaoDien/z5820586883713_6606cb514fbc06e7ea06515f9003b130.jpg" class="img-fluid w-100 h-100" alt="Logo">
                    </div>

                    <!-- Phần form bên phải -->
                    <div class="col-md-6 ">
                        <div class="card-body">
                                            <h3 class="text-success text-center mb-4" style="font-weight:bolder">Đăng kí tài khoản</h3>

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @successMessage
                    </div>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                <EditForm Model="@register" OnValidSubmit="Submit">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="UserName" class="form-label">Tên tài khoản</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-user"></i></span>
                            <InputText id="UserName" class="form-control" style="border-top-right-radius:10px; border-bottom-right-radius: 10px;" @bind-Value="register.UserName" placeholder="Nhập tên tài khoản" />
                        </div>
                        <ValidationMessage For="@(() => register.UserName)" />
                    </div>

                    <div class="mb-3">
                        <label for="Password" class="form-label">Mật khẩu</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-lock"></i></span>
                            <InputText id="Password" type="password" style="border-top-right-radius:10px; border-bottom-right-radius: 10px;" class="form-control" @bind-Value="register.Password" placeholder="Nhập mật khẩu" />
                        </div>
                        <ValidationMessage For="@(() => register.Password)" />
                    </div>

                    <div class="mb-3">
                        <label for="Confirm" class="form-label">Nhập lại mật khẩu</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-lock"></i></span>
                            <InputText id="Confirm" type="password" style="border-top-right-radius:10px; border-bottom-right-radius: 10px;" class="form-control" @bind-Value="register.ConformPassword" placeholder="Nhập lại mật khẩu" />
                        </div>
                        <ValidationMessage For="@(() => register.ConformPassword)" />
                    </div>

                    <div class="form-check mb-3">
                        <input type="checkbox" @bind-value="checKed" class="form-check-input" id="checkbox">
                        <label class="form-check-label" for="checkbox">
                            Tôi đồng ý với <a href="#">Chính sách và điều khoản</a>
                        </label>
                        @if (!string.IsNullOrEmpty(errorChecked))
                        {
                            <br />
                            <span class="text-danger">@errorChecked</span>
                        }
                    </div>

                    <button type="submit" class="btn btn-success btn-block w-100" style="border-radius:10px;">
                        <i class="fas fa-user-plus"></i> Đăng kí tài khoản
                    </button>
                </EditForm>
                            </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-1"></div>

</div>

<style>
    /* Giảm margin-top của card */
    .card {
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    /* Giảm margin-top trong card-body */
    .card-body {
        padding: 30px;
        margin-top: 10px; /* Giảm margin-top */
    }

    

    .input-group-text {
        background-color: white;
        color: green;
        border-top-left-radius: 10px;
        border-bottom-left-radius: 10px;
    }

    .form-control {
        background-color: white;
        border-top-right-radius: 10px;
        border-bottom-right-radius: 10px;
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: flex;
        align-items: center;
    }

        .validation-message::before {
            content: "\f06a";
            font-family: "Font Awesome 5 Free";
            font-weight: 900;
            margin-right: 0.5rem;
            color: #dc3545;
        }

    .alert {
        border-radius: 0.5rem;
        padding: 1rem;
        font-size: 1rem;
        margin-bottom: 1rem;
    }

    .alert-danger {
        background-color: #dc3545;
        color: #ffffff;
    }

    .alert-success {
        background-color: #28a745;
        color: #ffffff;
    }

    .btn-google, .btn-facebook {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

        .btn-google img, .btn-facebook img {
            width: 20px;
            height: 20px;
        }

    .btn-google {
        background-color: white;
        border-color: white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Đổ bóng nhẹ */
        transition: box-shadow 0.3s ease-in-out; /* Hiệu ứng chuyển tiếp khi hover */
    }

        .btn-google:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Đổ bóng khi hover */
        }


    .btn-facebook {
        background-color: #1877F2;
        color: white;
    }

    .btn-success {
        background-color: #34C759;
    }

    .form-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 2rem;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 0.75rem;
        background-color: white;
    }

        .form-container h2, .form-container .mb-3, .form-container .text-center {
            margin-bottom: 1rem;
        }

        .form-container button {
            height: 40px;
        }

    a {
        text-decoration: underline;
        color: #007bff;
    }

    .form-label {
        font-size: 1.2rem;
        font-weight: bold;
        color: green;
        position: relative;
        padding-bottom: 5px;
        transition: all 0.3s ease;
    }

        .form-label:hover {
            color: #28a745;
            cursor: pointer;
            transform: translateY(-3px);
        }

        .form-label::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 2px;
            background-color: #28a745;
            transform: scaleX(0);
            transform-origin: bottom right;
            transition: transform 0.3s ease-out;
        }

        .form-label:hover::after {
            transform: scaleX(1);
            transform-origin: bottom left;
            background-color: #28a745;
        }

</style>
@code {
    private RegisterDto register = new RegisterDto();
    private List<Account> accounts;
    private LoginDto login;
    private string errorMessage;
    private string successMessage;
    private bool checKed = false;
    private string errorChecked;
    private string token;

    private async Task Submit()
    {
        try
        {
            if (!checKed)
            {
                errorChecked = "Bạn cần đồng ý với chính sách và điều khoản";
                return;
            }
            else
                errorChecked = null;

            var response = await http.PostAsJsonAsync("api/User/RegisterUser", register);
            if (response.IsSuccessStatusCode)
            {
                try
                {
                    login = new LoginDto()
                        {
                            UserName = register.UserName,
                            Password = register.Password
                        };
                    var responseLogin = await http.PostAsJsonAsync("api/User/LoginUser", login);

                    if (responseLogin.IsSuccessStatusCode)
                    {
                        token = await responseLogin.Content.ReadAsStringAsync();
                        await js.InvokeVoidAsync("localStorage.setItem", "token", token);
                        http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                        navigation.NavigateTo("/", forceLoad: true);
                    }
                    else
                    {
                        errorMessage = await responseLogin.Content.ReadAsStringAsync();
                    }
                }
                catch (Exception ex)
                {

                    errorMessage = "Đã xảy ra lỗi đăng nhập: " + ex.Message;
                    successMessage = null;
                    await ClearErrorMessage();
                }
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                successMessage = null;
                await ClearErrorMessage();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Đã xảy ra lỗi đăng ký: " + ex.Message;
            successMessage = null;
            await ClearErrorMessage();
        }
    }

    private async Task ClearErrorMessage()
    {
        await Task.Delay(3000);
        errorMessage = null;
        StateHasChanged();
    }

    private string HashPassword(string password)
    {
        using (var sha256 = SHA256.Create())
        {
            byte[] inputBytes = Encoding.UTF8.GetBytes(password);
            byte[] hashBytes = sha256.ComputeHash(inputBytes);
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < hashBytes.Length && i < 16; i++)
            {
                sb.Append(hashBytes[i].ToString("x2"));
            }
            return sb.ToString();
        }
    }
}