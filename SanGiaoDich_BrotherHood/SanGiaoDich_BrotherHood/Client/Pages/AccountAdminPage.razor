@page "/Admin/Account"
@layout AdminLayout
@inject HttpClient httpClient
@using SanGiaoDich_BrotherHood.Shared.Models
@inject NavigationManager NavigationManager

<h3>Quản lý người dùng</h3>

<div class="mb-3 d-flex">
    <input @bind="searchKeyword" class="form-control me-2" placeholder="Tìm kiếm người dùng..." />
    <button class="btn btn-primary" @onclick="OnSearchKeywordChanged">Tìm kiếm</button>
</div>

@if (filteredUsers == null)
{
    <p>Đang tải dữ liệu...</p>
}
else if (!filteredUsers.Any())
{
    <p>Không tìm thấy người dùng nào phù hợp.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr class="text-center">
                <th>Tên đăng nhập</th>
                <th>Họ và tên</th>
                <th>Email</th>
                <th>Số điện thoại</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in filteredUsers)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.FullName</td>
                    <td>@user.Email</td>
                    <td class="text-center">@user.PhoneNumber</td>
                    <td class="text-center">
                        <button class="btn btn-primary">Chỉnh sửa</button>
                        <button class="btn @(user.IsDelete ?? false ? "btn-danger" : "btn-success")"
                                disabled="@(processingUsername == user.UserName)"
                                @onclick="() => ToggleBanAccount(user.UserName, user.IsDelete ?? false)">
                            @(processingUsername == user.UserName ? "Đang xử lý..." : (user.IsDelete ?? false ? "Cấm" : "Mở khóa"))
                        </button>

                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (isSuccess != null)
{
    <div class="alert @alertClass">
        @isSuccess
    </div>
}

@code {
    private List<Account> users;
    private List<Account> filteredUsers;
    private string searchKeyword = string.Empty;
    private string isSuccess;
    private string alertClass;
    private string processingUsername;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            users = await httpClient.GetFromJsonAsync<List<Account>>("api/user/GetAccounts");
            filteredUsers = users; // Gán danh sách ban đầu
        }
        catch (Exception ex)
        {
            await ShowAlert($"Lỗi khi tải dữ liệu: {ex.Message}", "alert-danger");
        }
    }

    private void OnSearchKeywordChanged()
    {
        if (string.IsNullOrWhiteSpace(searchKeyword))
        {
            filteredUsers = users; // Hiển thị tất cả người dùng khi không có từ khóa
        }
        else
        {
            filteredUsers = users.Where(u =>
                (u.UserName?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (u.FullName?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (u.Email?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (u.PhoneNumber?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();
        }
    }

    private async Task ShowAlert(string message, string alertType)
    {
        isSuccess = message;
        alertClass = alertType;
        await Task.Delay(5000); // Hiển thị thông báo trong 5 giây
        isSuccess = null; // Ẩn thông báo
    }

    private async Task ToggleBanAccount(string username, bool isBanned)
    {
        processingUsername = username;
        try
        {
            var response = await httpClient.PostAsJsonAsync<object>(
                $"api/Admin/{(isBanned ? "UnbanAccount" : "BanAccount")}?username={username}",
                null);

            if (response.IsSuccessStatusCode)
            {
                var action = isBanned ? "Mở khóa" : "Cấm";
                await ShowAlert($"Tài khoản đã được {action} thành công!", "alert-success");

                // Tải lại danh sách người dùng sau khi cấm/mở khóa tài khoản
                users = await httpClient.GetFromJsonAsync<List<Account>>("api/Admin/GetAllAccount");
                filteredUsers = users;
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                await ShowAlert($"Đã xảy ra lỗi: {errorMessage}", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            await ShowAlert($"Lỗi khi kết nối đến server: {ex.Message}", "alert-danger");
        }
        finally
        {
            processingUsername = null;
        }
    }
}
