@page "/Admin/Account"
@layout AdminLayout
@inject HttpClient httpClient
@using SanGiaoDich_BrotherHood.Shared.Models
@inject NavigationManager NavigationManager

<h3>Quản lý người dùng</h3>

<div class="mb-3 d-flex">
    <input @bind="searchKeyword" class="form-control me-2" placeholder="Tìm kiếm người dùng..." />
    <button class="btn btn-primary" @onclick="OnSearchKeywordChanged">Tìm kiếm</button>
</div>

@if (isModalVisible)
{
    <div class="modal-backdrop fade show"></div>
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @modalMessage
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="CloseModal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
}


@if (filteredUsers == null)
{
    <p>Đang tải dữ liệu...</p>
}
else if (!filteredUsers.Any())
{
    <p>Không tìm thấy người dùng nào phù hợp.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr class="text-center">
                <th>Tên đăng nhập</th>
                <th>Họ và tên</th>
                <th>Email</th>
                <th>Số điện thoại</th>
                <th>Trạng thái</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in filteredUsers.Skip((currentPage - 1) * pageSize).Take(pageSize))
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.FullName</td>
                    <td>@user.Email</td>
                    <td class="text-center">@user.PhoneNumber</td>
                    <td>@(user.IsDelete == true ? "Bị cấm" : "Hoạt động")</td>
                    <td class="text-center">
                        <button class="btn btn-primary me-2">Chỉnh sửa</button>
                        @if (user.IsDelete == true)
                        {
                            <button class="btn btn-success" @onclick="() => OnUnBanAccount(user.UserName)">Mở khóa</button>
                        }
                        else
                        {
                            <button class="btn btn-danger" @onclick="() => OnBanAccount(user.UserName)">Cấm</button>
                        }
                    </td>
                </tr>
            }
        </tbody>

    </table>
    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage">Trang trước</button>
        <span>Trang @currentPage / @totalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage">Trang sau</button>
    </div>
}

@code {
    private List<Account> users;
    private List<Account> filteredUsers;
    private string searchKeyword = string.Empty;

    // Biến cho modal
    private bool isModalVisible = false;
    private string modalTitle;
    private string modalMessage;

    private int currentPage = 1;
    private int pageSize = 10; // Số lượng mục hiển thị trên mỗi trang
    private int totalPages => (int)Math.Ceiling((double)(filteredUsers?.Count ?? 0) / pageSize);


    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await httpClient.GetFromJsonAsync<List<Account>>("api/user/GetAccounts");
            filteredUsers = users;
        }
        catch (Exception ex)
        {
            ShowModal("Lỗi", $"Không thể tải danh sách người dùng: {ex.Message}");
        }
    }

    private void OnSearchKeywordChanged()
    {
        if (string.IsNullOrWhiteSpace(searchKeyword))
        {
            filteredUsers = users;
        }
        else
        {
            filteredUsers = users.Where(u =>
                (u.UserName?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (u.FullName?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (u.Email?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (u.PhoneNumber?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();
        }
        currentPage = 1; // Đặt lại về trang đầu tiên
    }

    private async Task OnBanAccount(string username)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync($"api/Admin/BanAccount?username={username}", username);
            if (response.IsSuccessStatusCode)
            {
                ShowModal("Thành công", $"Tài khoản {username} đã bị cấm.");
                await OnInitializedAsync();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowModal("Lỗi", $"Không thể cấm tài khoản: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowModal("Lỗi hệ thống", ex.Message);
        }
    }

    private async Task OnUnBanAccount(string username)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync($"api/Admin/UnBanAccount?username={username}", username);
            if (response.IsSuccessStatusCode)
            {
                ShowModal("Thành công", $"Tài khoản {username} đã được mở khóa.");
                await OnInitializedAsync();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowModal("Lỗi", $"Không thể mở khóa tài khoản: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowModal("Lỗi hệ thống", ex.Message);
        }
    }

    private void ShowModal(string title, string message)
    {
        modalTitle = title;
        modalMessage = message;
        isModalVisible = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        isModalVisible = false;
        StateHasChanged();
        LoadUsers(); // Cập nhật danh sách sau khi đóng modal
    }
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
        }
    }
}

