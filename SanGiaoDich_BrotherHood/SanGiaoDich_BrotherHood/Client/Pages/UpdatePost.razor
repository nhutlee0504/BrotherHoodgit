@page "/updatepost/{ProductId:int}"

@using SanGiaoDich_BrotherHood.Shared.Models
@using SanGiaoDich_BrotherHood.Shared.Dto
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Cập nhật sản phẩm</h3>

<div class="container">
    <!-- Tên sản phẩm -->
    <div class="form-group mb-3">
        <label for="ProductName">Tên sản phẩm:</label>
        <input type="text" @bind="ProductName" class="form-control" placeholder="Nhập tên sản phẩm" id="ProductName" />
    </div>

    <!-- Giá sản phẩm -->
    <div class="form-group mb-3">
        <label for="ProductPrice">Giá sản phẩm:</label>
        <input type="number" @bind="ProductPrice" class="form-control" placeholder="Nhập giá sản phẩm" id="ProductPrice" />
    </div>

    <!-- Số lượng sản phẩm -->
    <div class="form-group mb-3">
        <label for="ProductQuantity">Số lượng sản phẩm:</label>
        <input type="number" @bind="ProductQuantity" class="form-control" placeholder="Nhập số lượng sản phẩm" id="ProductQuantity" />
    </div>

    <!-- Loại sản phẩm -->
    <div class="form-group mb-3">
        <label for="ProductCategory">Loại sản phẩm:</label>
        <select @bind="ProductCategoryId" class="form-control" id="ProductCategory">
            <option value="">Chọn loại sản phẩm</option>
            @foreach (var category in categories)
            {
                <option value="@category.IDCategory">
                    @category.NameCate
                </option>
            }
        </select>
    </div>


    <!-- Mô tả sản phẩm -->
    <div class="form-group mb-3">
        <label for="ProductDescription">Mô tả sản phẩm:</label>
        <textarea @bind="Description" class="form-control" id="ProductDescription" rows="4"></textarea>
    </div>

    <!-- Hình ảnh sản phẩm -->
    <div class="form-group mb-3">
        <label>Hình ảnh sản phẩm:</label>
        <div class="d-flex flex-wrap">
            @if (images != null && images.Any())
            {
                @foreach (var image in images)
                {
                    <div class="image-item m-2" style="position: relative;">
                        <img src="/AnhSanPham/@image.Image" alt="Ảnh sản phẩm" style="width: 100px; height: 100px; object-fit: cover;" />
                    </div>
                }
            }
            else
            {
                <p>Không có hình ảnh cho sản phẩm này.</p>
            }
        </div>
    </div>

    <!-- Chọn ảnh mới từ file -->
    <div class="form-group">
        <label for="newImageFile">Chọn ảnh mới:</label>
        <input type="file" id="newImageFile" @onchange="OnFileSelected" class="form-control" />
    </div>

    <button @onclick="UpdateImage" class="btn btn-primary">Cập nhật hình ảnh</button>

    <!-- Nút cập nhật sản phẩm -->
    <button @onclick="UpdateProduct" class="btn btn-success">Cập nhật sản phẩm</button>

</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    [Parameter] public int ProductId { get; set; }
    private string ProductName { get; set; }
    private decimal ProductPrice { get; set; }
    private int ProductQuantity { get; set; }
    private string Description { get; set; }
    private int ProductCategoryId { get; set; }
    private string errorMessage { get; set; }
    private List<ImageProduct> images;
    private List<Category> categories = new List<Category>();
    private IBrowserFile selectedFile;   // Lưu trữ ảnh mới chọn

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCategories(); // Tải danh sách loại sản phẩm
            var product = await GetProductById(ProductId);

            if (product != null)
            {
                ProductName = product.Name;
                ProductPrice = product.Price;
                ProductQuantity = product.Quantity;
                ProductCategoryId = product.Category?.IDCategory ?? 0; // Lấy loại sản phẩm của sản phẩm đã chọn
                Description = product.Description;
                images = await GetImagesByProductId(product.IDProduct);
            }
            else
            {
                errorMessage = "Không tìm thấy sản phẩm";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải thông tin sản phẩm: {ex.Message}";
        }
    }


    private async Task<Product> GetProductById(int id)
    {
        var response = await HttpClient.GetAsync($"api/product/GetProductById/{id}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<Product>();
        }
        throw new Exception("Không thể tải dữ liệu sản phẩm");
    }

    private async Task LoadCategories()
    {
        var categoryList = await HttpClient.GetFromJsonAsync<List<Category>>("api/category/GetCategories");
        categories = categoryList ?? new List<Category>();
    }

    private async Task<List<ImageProduct>> GetImagesByProductId(int id)
    {
        var response = await HttpClient.GetAsync($"api/ImageProduct/GetImageProduct/{id}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<ImageProduct>>() ?? new List<ImageProduct>();
        }
        else
        {
            errorMessage = "Không thể tải ảnh từ API: " + response.ReasonPhrase;
            return new List<ImageProduct>();
        }
    }

    private async Task UpdateProduct()
    {
        try
        {
            var productDto = new ProductDto
                {
                    Name = ProductName,
                    Price = ProductPrice,
                    Quantity = ProductQuantity,
                    CategoryId = ProductCategoryId,
                    Description = Description
                };

            var response = await HttpClient.PutAsJsonAsync($"api/product/UpdateProduct/{ProductId}", productDto);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/"); // Điều hướng về trang chính hoặc trang danh sách sản phẩm
            }
            else
            {
                errorMessage = $"Cập nhật không thành công: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi cập nhật sản phẩm: {ex.Message}";
        }
    }

    private void OnFileSelected(ChangeEventArgs e)
    {
        // Lấy giá trị của file từ input file
        var fileInput = e.Value as IEnumerable<IBrowserFile>;
        var file = fileInput?.FirstOrDefault();

        if (file != null)
        {
            // Gán giá trị file cho selectedFile
            selectedFile = file;
        }
        else
        {
            // Thông báo lỗi nếu không có file nào được chọn
            errorMessage = "Vui lòng chọn ảnh mới.";
        }
    }

    private async Task UpdateImage()
    {
        // Kiểm tra nếu có ảnh mới được chọn
        if (selectedFile != null)
        {
            // Tạo formData để gửi file
            var formData = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream());
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            formData.Add(fileContent, "file", selectedFile.Name);

            // Gửi request cập nhật hình ảnh
            var response = await HttpClient.PutAsync($"api/ImageProduct/UpdateImage/{ProductId}", formData);

            if (response.IsSuccessStatusCode)
            {
                // Cập nhật thành công, làm mới lại danh sách hình ảnh
                images = await GetImagesByProductId(ProductId);
            }
            else
            {
                errorMessage = "Cập nhật hình ảnh thất bại.";
            }
        }
        else
        {
            errorMessage = "Vui lòng chọn ảnh mới.";
        }
    }
}

