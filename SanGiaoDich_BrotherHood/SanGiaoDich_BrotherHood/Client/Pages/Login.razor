@page "/login"
@using System.ComponentModel.DataAnnotations
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<style>
    /* Your existing styles here */
</style>

<div class="container">
    <div class="row justify-content-center mt-5 mb-5">
        <div class="col-md-6">
            <div class="form-container p-4 rounded bg-white shadow-sm">
                <h2 class="text-center mb-4">Đăng nhập tài khoản</h2>

                @if (!string.IsNullOrEmpty(SuccessMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @SuccessMessage
                    </div>
                }
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @ErrorMessage
                    </div>
                }

                <EditForm Model="@this" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="UserName" class="form-label">Tên tài khoản</label>
                        <InputText id="UserName" class="form-control rounded-start" @bind-Value="UserName" placeholder="Nhập tên tài khoản" />
                        <ValidationMessage For="@(() => UserName)" />
                    </div>
                    <div class="mb-3">
                        <label for="Password" class="form-label">Mật khẩu</label>
                        <div class="input-group">
                            <InputText id="Password" type="password" class="form-control rounded-start" @bind-Value="Password" placeholder="Nhập mật khẩu" />
                        </div>
                        <ValidationMessage For="@(() => Password)" />
                    </div>
                    <button type="submit" class="btn btn-success btn-block w-100 rounded-start">Đăng nhập</button>
                    <div class="text-right mt-3">
                        <a href="forgotPass" class="text-primary">Quên mật khẩu?</a>
                    </div>
                    <div class="text-center mt-3">
                        Bạn chưa có tài khoản? <a class="text-primary" href="Pages/Register">Đăng ký tài khoản</a><br />
                    </div>
                </EditForm>
            </div>


            <div class="mt-4 text-center">
                <strong>Hoặc đăng nhập bằng</strong>
                <div class="mt-3">
                    <button @onclick="LoginWithGoogle" class="btn btn-google mx-auto rounded-pill" style="max-width: 400px;">
                        <img src="https://developers.google.com/identity/images/g-logo.png" alt="Google logo" class="me-2" style="height: 20px;" />
                        Đăng nhập với Google
                    </button>
                </div
                 <div class="mt-3">
                <button @onclick="LoginWithFacebook" class="btn btn-facebook mx-auto rounded-pill" style="max-width: 400px;">
                    <img src="https://upload.wikimedia.org/wikipedia/commons/5/51/Facebook_f_logo_%282019%29.svg" alt="Facebook logo" class="me-2" style="height: 20px;" />
                    Đăng nhập với Facebook
                </button>
            </div>
            </div>

        </div>
    </div>
</div>

@code {
    
    private string UserName { get; set; }
    private string Password { get; set; }
    private string ErrorMessage { get; set; }
    private string SuccessMessage { get; set; }
    private string Token { get; set; }

    // This will run when the component is initialized (when the user navigates to the /login page)
    protected override async Task OnInitializedAsync()
    {
        // Check if a token is present in the query string or local storage
        var uri = NavigationManager.Uri;

        // Step 1: If token is present in the URL, get it and store it in local storage
        if (uri.Contains("token"))
        {
            var uriToken = new Uri(uri).Query;
            Token = Uri.UnescapeDataString(uriToken.Replace("?token=", ""));

            // Step 2: Store the token in localStorage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", Token);

            // Step 3: Optionally, set Authorization header for HTTP requests
            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Token);

            // Step 4: Redirect to home or other appropriate page after saving the token
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            // Check if token exists in localStorage
            Token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");

            // Step 5: If token exists in localStorage, set Authorization header
            if (!string.IsNullOrEmpty(Token))
            {
                HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Token);

                // Optionally, redirect to the home page after setting the Authorization header
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
        }
    }

    private async Task HandleLogin()
    {
        var loginDto = new { UserName, Password };

        try
        {
            var response = await HttpClient.PostAsJsonAsync("api/user/LoginUser", loginDto);

            if (response.IsSuccessStatusCode)
            {
                Token = await response.Content.ReadAsStringAsync();
                SuccessMessage = "Đăng nhập thành công!";
                ErrorMessage = null;

                // Lưu token vào local storage
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", Token);

                // Thiết lập token cho các yêu cầu HTTP sau này
                HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Token);

                // Quay về trang chủ
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ErrorMessage = errorMessage;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Có lỗi xảy ra: " + ex.Message;
        }
    }

    private async Task LoginWithGoogle()
    {
        // Redirect the user to the Google authentication page
        var googleAuthUrl = "https://localhost:44359/api/user/signin-google";
        NavigationManager.NavigateTo(googleAuthUrl, true);  // Điều hướng đến trang đăng nhập Google
    }

    private async Task LoginWithFacebook()
    {
    // Redirect the user to the Facebook authentication page
    var facebookAuthUrl = "https://localhost:44359/api/user/signin-facebook";
    NavigationManager.NavigateTo(facebookAuthUrl, true);  // Điều hướng đến trang đăng nhập Facebook
    }


    private async Task ClearErrorMessageAfterDelay()
    {
        await Task.Delay(3000);
        ErrorMessage = null;
        StateHasChanged();
    }
}
