@page "/Admin/Product"
@using SanGiaoDich_BrotherHood.Shared.Models
@layout AdminLayout
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
<style>
    /* Cập nhật lại search-filter-container */
    .search-filter-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        background-color: #fff;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    /* Điều chỉnh phần container tìm kiếm và lọc để chúng đồng nhất */
    .search-container,
    .filter-container {
        display: flex;
        align-items: center;
        gap: 15px; /* Khoảng cách giữa các phần tử */
        margin-bottom: 15px; /* Khoảng cách giữa các bộ lọc */
        flex-wrap: wrap;
        justify-content: flex-start;
    }

        /* Cập nhật các input và select trong các bộ lọc */
        .search-input,
        .filter-select,
        .filter-container input[type="date"] {
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            width: 250px; /* Đảm bảo các input có cùng chiều rộng */
            box-sizing: border-box;
        }

    .btn-search,
    .btn-primary {
        padding: 12px 20px;
        background-color: royalblue; /* Màu xanh dương */
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .btn-search:hover,
        .btn-primary:hover {
            background-color: #1e90ff; /* Xanh dương nhạt khi hover */
        }

    /* Tùy chỉnh bảng: màu nền xen kẽ */
    .table-striped-custom tbody tr:nth-child(odd) {
        background-color: #f8f9fa; /* Màu xám nhạt */
    }

    .table-striped-custom tbody tr:nth-child(even) {
        background-color: #ffffff; /* Màu trắng */
    }

    .table-striped-custom th {
        background-color: #343a40; /* Nền màu đen xám */
        color: #ffffff; /* Chữ trắng */
    }

    .table-striped-custom td {
        padding: 12px;
        border-bottom: 1px solid #ddd;
        vertical-align: middle; /* Canh giữa theo chiều dọc */
    }

    /* Các nút hành động */
    .action-buttons {
        display: flex;
        gap: 12px;
        justify-content: center;
    }

    .btn-info {
        background-color: royalblue;
    }

    .btn-danger {
        background-color: #f44336;
    }

    .page-item {
        list-style-type: none;
    }

    .page-link {
        display: inline-block;
        text-align: center;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 600;
        border-radius: 0.375rem;
    }

    .pagination .page-item.selected .page-link {
        background-color: #28A745 !important;
        color: white !important;
    }

    .pagination .page-item .page-link:hover {
        background-color: green;
        color: white !important;
    }
</style>
<div class="search-filter-container">
    <div class="search-container">
        <input type="text" @bind="searchQuery" class="search-input" placeholder="Tìm kiếm theo tên hoặc ID sản phẩm...">
        <button class="btn btn-search" @onclick="Search">Tìm kiếm</button>
    </div>
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }


    <div class="filter-container">
        <select @bind="filterStatus" class="filter-select">
            <option value="">Tất cả</option>
            <option value="Đang chờ duyệt">Đang chờ duyệt</option>
            <option value="Đã duyệt">Đã duyệt</option>
            <option value="Đã xóa">Đã xóa</option>
        </select>
        <button class="btn btn-primary" @onclick="FilterByStatus">Lọc</button>
    </div>

    <div class="filter-container">
        <label for="startDate">Ngày bắt đầu:</label>
        <input type="date" id="startDate" @bind="startDate" class="filter-select" />
        <label for="endDate">Ngày kết thúc:</label>
        <input type="date" id="endDate" @bind="endDate" class="filter-select" />
        <button class="btn btn-primary" @onclick="FilterByDate">Lọc</button>
    </div>

</div>
<table class="table table-hover table-striped-custom align-middle text-center">
    <thead>
        <tr class="text-center">
            <th>Tên sản phẩm</th>
            <th>Người bán</th>
            <th>Ngày đăng</th>
            <th>Mức ưu tiên</th>
            <th>Trạng thái</th>
            <th>Người kiểm duyệt</th>
            <th>Thao tác</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>@product.Name</td>
                <td class="text-center">@product.UserName</td>
                <td class="text-center">@product.StartDate?.ToString("dd/MM/yyyy HH:mm:ss")</td>
                <td class="text-center">@product.ProrityLevel</td>
                <td class="text-center">@product.Status</td>
                <td class="text-center">@product.AccountAccept</td>
                <td class="action-buttons text-center">
                    @if (product.Status == "Đang chờ duyệt")
                    {
                        <button class="btn btn-success btn-sm" @onclick="() => HanndleAccept(product.IDProduct)">Duyệt</button>
                        <button class="btn btn-danger btn-sm me-1" @onclick="() => HandleCancle(product.IDProduct)">Không duyệt</button>
                    }
                    else
                    {
                        <a class="btn btn-info btn-sm" href="@($"/Admin/Product/{product.IDProduct}")">Xem</a>
                        @if (product.Status != "Đã xóa")
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => SoftDeleteProduct(product.IDProduct)">Xóa</button>
                        }
                    }
                </td>
            </tr>
        }

    </tbody>
</table>
<!-- Phân trang -->
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
        <li class="page-item @(currentPage == 1 ? "disabled" : "") m-2">
            <a class="page-link text-black" aria-label="Previous" @onclick="() => ChangePage(currentPage - 1)">
                <span aria-hidden="true"><i class="bi bi-caret-left-fill"></i></span>
            </a>
        </li>
        @for (var i = currentPage - 2; i <= currentPage + 2; i++)
        {
            int j = i;
            if (i > 0 && i <= totalPages)
            {
                <li class="page-item @(currentPage == i ? "selected" : "") m-2">
                    <a class="page-link text-black" @onclick="() => ChangePage(j)">
                        <span>@i</span>
                    </a>
                </li>
            }
        }
        <li class="page-item @(currentPage == totalPages ? "disabled" : "") m-2">
            <a class="page-link text-black" aria-label="Next" @onclick="() => ChangePage(currentPage + 1)">
                <span aria-hidden="true"><i class="bi bi-caret-right-fill"></i></span>
            </a>
        </li>
    </ul>
</nav>

@code {
    private List<Product> products = new List<Product>();
    private Dictionary<int, List<string>> productImages = new Dictionary<int, List<string>>();
    private Product product1 = new Product();
    private string searchQuery = string.Empty;
    private string errorMessage = string.Empty;
    private List<Product> allProducts = new List<Product>(); // Danh sách gốc
    private int currentPage = 1;
    private int pageSize = 10; // Số sản phẩm trên mỗi trang
    private int totalPages;
    private DateTime? startDate = null;
    private DateTime? endDate = null;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            allProducts = await httpClient.GetFromJsonAsync<List<Product>>("api/product/GetAllProduct");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
        UpdatePageProducts();
    }
    private void UpdatePageProducts()
    {
        var prods = allProducts.Where(x => x.Status.ToLower().Contains("đã duyệt")).ToList();
        totalPages = prods.Any() ? (int)Math.Ceiling((double)prods.Count / pageSize) : 1;
        products = prods.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }


    private void ChangePage(int page)
    {
        currentPage = page;
        UpdatePageProducts();
    }

    private async Task Search()
    {
        try
        {
            errorMessage = string.Empty;

            if (string.IsNullOrWhiteSpace(searchQuery))
            {
                products = await httpClient.GetFromJsonAsync<List<Product>>("api/product/GetAllProduct");
            }
            else if (int.TryParse(searchQuery, out int productId))
            {
                var response = await httpClient.GetAsync($"api/product/GetProductById/{productId}");
                if (response.IsSuccessStatusCode)
                {
                    var product = await response.Content.ReadFromJsonAsync<Product>();
                    products = product != null ? new List<Product> { product } : new List<Product>();
                }
                else
                {
                    errorMessage = $"Lỗi API: {response.ReasonPhrase}";
                    products = new List<Product>();
                }
            }
            else
            {
                var response = await httpClient.GetAsync($"api/product/GetProductByName/{searchQuery}");
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<List<Product>>();
                    products = result ?? new List<Product>();
                }
                else
                {
                    errorMessage = $"Lỗi API: {response.ReasonPhrase}";
                }
            }

            currentPage = 1; // Reset về trang đầu tiên sau khi tìm kiếm
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }


    private async Task HanndleAccept(int productid)
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync<Product>($"api/Product/Accept/{productid}", null);

            if (response.IsSuccessStatusCode)
            {

                NavigationManager.NavigateTo("/admin/product", forceLoad: true);
                Console.WriteLine($"Sản phẩm {productid} đã được duyệt.");
            }
            else
            {

                Console.WriteLine($"Lỗi khi duyệt sản phẩm {productid}: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi duyệt sản phẩm: {ex.Message}");
        }
    }
    private async Task HandleCancle(int productid)
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync<Product>($"api/Product/Cancle/{productid}", null);

            if (response.IsSuccessStatusCode)
            {

                NavigationManager.NavigateTo("/admin/product", forceLoad: true);
                Console.WriteLine($"Sản phẩm {productid} đã được duyệt.");
            }
            else
            {

                Console.WriteLine($"Lỗi khi duyệt sản phẩm {productid}: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi duyệt sản phẩm: {ex.Message}");
        }
    }


    private void ViewProduct(int id)
    {

        Console.WriteLine($"Xem sản phẩm ID: {id}");
    }
    private void EditProduct(int id)
    {
        Console.WriteLine($"Chỉnh sửa sản phẩm ID: {id}");
    }

    private void DeleteProduct(int id)
    {
        Console.WriteLine($"Xóa sản phẩm ID: {id}");
    }
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
        }
    }
    private async Task FilterByDate()
    {
        try
        {
            errorMessage = string.Empty;

            if (startDate == null || endDate == null)
            {
                errorMessage = "Vui lòng chọn cả ngày bắt đầu và ngày kết thúc.";
                return;
            }

            if (startDate > endDate)
            {
                errorMessage = "Ngày bắt đầu không thể lớn hơn ngày kết thúc.";
                return;
            }

            // Điều chỉnh ngày kết thúc thành 23:59:59
            var adjustedEndDate = endDate?.AddDays(1).AddTicks(-1);

            // Gửi yêu cầu đến API
            var response = await httpClient.GetAsync(
                $"api/product/GetProductsByDate?startDate={startDate:yyyy-MM-dd}&endDate={adjustedEndDate:yyyy-MM-dd}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<Product>>();
                products = result ?? new List<Product>();
            }
            else
            {
                errorMessage = $"Lỗi API: {response.ReasonPhrase}";
            }

            currentPage = 1; // Reset trang về đầu
        }
        catch (Exception ex)
        {
            errorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
    }
    private async Task SoftDeleteProduct(int id)
    {
        try
        {
            var response = await httpClient.PutAsync($"api/Product/SoftDelete/{id}", null);

            if (response.IsSuccessStatusCode)
            {
                // Xóa sản phẩm khỏi danh sách sau khi xóa mềm
                var deletedProduct = products.FirstOrDefault(p => p.IDProduct == id);
                if (deletedProduct != null)
                {
                    products.Remove(deletedProduct);
                }

                Console.WriteLine($"Đã xóa mềm sản phẩm ID: {id}.");
            }
            else
            {
                errorMessage = $"Lỗi API: {response.ReasonPhrase}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
    private string filterStatus = string.Empty;

    private async Task FilterByStatus()
    {
        try
        {
            products = await httpClient.GetFromJsonAsync<List<Product>>("api/product/GetAllProduct");

            // Áp dụng bộ lọc trạng thái nếu người dùng chọn
            if (!string.IsNullOrWhiteSpace(filterStatus))
            {
                products = products.Where(p => p.Status == filterStatus).ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi lọc sản phẩm: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }
}
