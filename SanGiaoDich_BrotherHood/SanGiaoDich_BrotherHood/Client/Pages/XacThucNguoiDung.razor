@page "/gemini"
@using Microsoft.Extensions.Configuration
@inject HttpClient HttpClient
@inject IConfiguration Configuration

<div class="container mt-4">
    <h3>Tạo Mô Tả Sản Phẩm</h3>

    <div class="mb-3">
        <label for="inputText" class="form-label">Nhập Tên Sản Phẩm</label>
        <input id="inputText" class="form-control" @bind="InputText" placeholder="Nhập tên sản phẩm..." />
    </div>

    <button class="btn btn-primary" @onclick="GenerateDescriptionAsync" disabled="@IsLoading">
        @if (IsLoading)
        {
            <span class="spinner-border spinner-border-sm"></span>
        }
        else
        {
            <span>Tạo Mô Tả</span>
        }
    </button>

    <div class="mt-4">
        @if (!string.IsNullOrWhiteSpace(ResponseText))
        {
            <h5>Kết Quả:</h5>
            <p>@ResponseText</p>
        }
        @if (!string.IsNullOrWhiteSpace(ErrorMessage))
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }
    </div>
</div>

@code {
    private string InputText { get; set; } = "";
    private string ResponseText { get; set; } = "";
    private string ErrorMessage { get; set; } = "";
    private bool IsLoading { get; set; } = false;

    private async Task GenerateDescriptionAsync()
    {
        if (string.IsNullOrWhiteSpace(InputText))
        {
            ErrorMessage = "Vui lòng nhập tên sản phẩm!";
            return;
        }

        IsLoading = true;
        ErrorMessage = "";
        ResponseText = "";

        try
        {
            var apiKey = "AIzaSyCzfoNKKRut7xcECF_VZxm9tda-u1P8jts";
            var url = $"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={apiKey}";

            var requestBody = new
            {
                contents = new[]
                {
                    new
                    {
                        parts = new[]
                        {
                            new { text = $"Describe the product: {InputText}" }
                        }
                    }
                }
            };

            var response = await HttpClient.PostAsJsonAsync(url, requestBody);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<GeminiResponse>();
                ResponseText = result?.candidates?.FirstOrDefault()?.content?.parts?.FirstOrDefault()?.text ?? "Không có nội dung trả về.";
            }
            else
            {
                ErrorMessage = $"Lỗi: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Đã xảy ra lỗi: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class GeminiResponse
    {
        public Candidate[] candidates { get; set; }

        public class Candidate
        {
            public Content content { get; set; }

            public class Content
            {
                public Part[] parts { get; set; }

                public class Part
                {
                    public string text { get; set; }
                }
            }
        }
    }
}
