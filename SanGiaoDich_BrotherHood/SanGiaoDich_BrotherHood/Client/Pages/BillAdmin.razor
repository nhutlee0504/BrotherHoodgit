@page "/Admin/Bill"
@using SanGiaoDich_BrotherHood.Shared.Models
@layout AdminLayout
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<h3>Danh sách hóa đơn</h3>

<!-- Tìm kiếm -->
<div class="mb-3">
    <div class="row">
        <div class="col-md-6">
            <label for="searchByFullName">Tìm kiếm theo Họ và tên:</label>
            <input id="searchByFullName" type="text" @bind="searchFullName" class="form-control" placeholder="Nhập họ và tên" />
        </div>
        <div class="col-md-4">
            <label for="searchByIDBill">Tìm kiếm theo ID Hóa đơn:</label>
            <input id="searchByIDBill" type="number" @bind="searchIDBill" class="form-control" placeholder="Nhập ID hóa đơn" />
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-primary" @onclick="SearchBills">Tìm kiếm</button>
        </div>
    </div>
</div>

@if (bills == null)
{
    <p>Đang tải dữ liệu...</p>
}
else if (!bills.Any())
{
    <p>Không có hóa đơn nào.</p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>#</th>
                <th>Họ và tên</th>
                <th>Số điện thoại</th>
                <th>Địa chỉ giao hàng</th>
                <th>Ngày đặt hàng</th>
                <th>Hình thức thanh toán</th>
                <th>Tổng tiền</th>
                <th>Trạng thái</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bill in bills.Skip((currentPage - 1) * pageSize).Take(pageSize))
            {
                <tr>
                    <td>@bill.IDBill</td>
                    <td>@bill.FullName</td>
                    <td>@bill.PhoneNumber</td>
                    <td>@bill.DeliveryAddress</td>
                    <td>@bill.OrderDate.ToString("dd/MM/yyyy")</td>
                    <td>@bill.PaymentType</td>
                    <td>@bill.Total.ToString("C")</td>
                    <td>@bill.Status</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => NavigateToBillDetails(bill.IDBill)">Xem chi tiết</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage">Trang trước</button>
        <span>Trang @currentPage / @totalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage">Trang sau</button>
    </div>
}

@code {
    private List<Bill> bills;
    private List<Bill> allBills;
    private string searchFullName;
    private int? searchIDBill;

    private int currentPage = 1;
    private int pageSize = 10; // Số lượng hóa đơn trên mỗi trang
    private int totalPages => (int)Math.Ceiling((double)(bills?.Count ?? 0) / pageSize);


    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Lấy tất cả hóa đơn khi trang được khởi tạo
            allBills = await httpClient.GetFromJsonAsync<List<Bill>>("api/Bill/GetBill");
            bills = new List<Bill>(allBills); // Hiển thị tất cả hóa đơn khi chưa tìm kiếm
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi khi tải dữ liệu: " + ex.Message);
            bills = new List<Bill>();
        }
    }

    // Phương thức tìm kiếm hóa đơn
    private async Task SearchBills()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(searchFullName))
            {
                bills = await httpClient.GetFromJsonAsync<List<Bill>>($"api/Bill/GetBillsByUserName/{searchFullName}");
            }
            else if (searchIDBill.HasValue)
            {
                var bill = await httpClient.GetFromJsonAsync<Bill>($"api/Bill/GetBillsByIDBill/{searchIDBill.Value}");
                bills = bill != null ? new List<Bill> { bill } : new List<Bill>();
            }
            else
            {
                bills = new List<Bill>(allBills);
            }

            currentPage = 1; // Đặt lại trang đầu tiên
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi khi tìm kiếm hóa đơn: " + ex.Message);
            bills = new List<Bill>();
        }
    }


    // Điều hướng tới trang chi tiết hóa đơn
    private void NavigateToBillDetails(int IDBill)
    {
        NavigationManager.NavigateTo($"/Admin/BillDetails/{IDBill}");
    }

    // Class Bill mô tả thông tin hóa đơn
    public class Bill
    {
        public int IDBill { get; set; }
        public string FullName { get; set; }
        public string PhoneNumber { get; set; }
        public string DeliveryAddress { get; set; }
        public DateTime OrderDate { get; set; }
        public string PaymentType { get; set; }
        public decimal Total { get; set; }
        public string Status { get; set; }
    }
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
        }
    }

}
