@page "/PageGioHang"
@using SanGiaoDich_BrotherHood.Shared.Models
@using System.Text.Json
@inject HttpClient http
@inject NavigationManager navigation
@inject IJSRuntime jsruntime

@code {
    private List<CartItemDto> cartItemDtos;
    private bool isLoading = true;
    private string errorMessage;
    private string userName;
    private bool IsLoggedIn { get; set; } = false;
    private decimal selectedTotal;

    
    protected override async Task OnInitializedAsync()
    {
        await CheckTokenAndLoadAccountInfo();
    }

    private async Task CheckTokenAndLoadAccountInfo()
    {
        var token = await jsruntime.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
        {
            http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await LoadAccountInfo();
        }
        else
        {
            navigation.NavigateTo("/login");
        }
    }

    private async Task LoadAccountInfo()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var response = await http.GetAsync("api/User/GetMyInfo");

            if (response.IsSuccessStatusCode)
            {
                var accountInfo = await response.Content.ReadFromJsonAsync<AccountInfoDto>();
                IsLoggedIn = true;
                userName = accountInfo.UserName;
                await LoadCartItems();
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                IsLoggedIn = false;
                navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra: " + ex.Message;
            IsLoggedIn = false;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCartItems()
    {
        if (IsLoggedIn && !string.IsNullOrEmpty(userName))
        {
            var response = await http.GetAsync($"api/Cart/GetCartsByUserName/{userName}");
            if (response.IsSuccessStatusCode)
            {
                cartItemDtos = await response.Content.ReadFromJsonAsync<List<CartItemDto>>();

                // Lấy thông tin sản phẩm, tên danh mục và ảnh đầu tiên cho từng mục trong giỏ hàng
                foreach (var item in cartItemDtos)
                {
                    item.Product = await GetProductById(item.IdProduct);
                    item.CategoryName = await GetCategoryNameById(item.Product.IDCategory);

                    // Lấy danh sách ảnh và gán ảnh đầu tiên (nếu có) vào FirstImageUrl
                    var images = await GetImagesByProductId(item.IdProduct);
                    item.FirstImageUrl = images.FirstOrDefault()?.Image; // Gán URL của ảnh đầu tiên
                }
            }
            else
            {
                errorMessage = await response.Content.ReadAsStringAsync();
            }
        }

    }

    private void UpdateSelectedTotal()
    {
        selectedTotal = cartItemDtos
            ?.Where(item => item.IsSelected)
            .Sum(item => item.Product.Price) ?? 0;
    }

    private void ToggleSelectAll(bool isSelected)
    {
        foreach (var item in cartItemDtos)
        {
            item.IsSelected = isSelected;
        }
        UpdateSelectedTotal();
    }

    private void OnItemSelectionChanged(bool isSelected, CartItemDto cartItem)
    {
        cartItem.IsSelected = isSelected;
        UpdateSelectedTotal();
    }

    private async Task ProcessPayment()
    {
        // Lọc chỉ các sản phẩm đã chọn
        var selectedItems = cartItemDtos.Where(item => item.IsSelected).ToList();

        if (selectedItems.Any())
        {
            // Xóa thông báo lỗi nếu có sản phẩm được chọn
            errorMessage = string.Empty;

            // Lưu các sản phẩm đã chọn vào local storage
            await jsruntime.InvokeVoidAsync("localStorage.setItem", "selectedCartItems", JsonSerializer.Serialize(selectedItems));

            // Điều hướng đến trang thanh toán
            navigation.NavigateTo("/PageThanhToan");
        }
        else
        {
            errorMessage = "Vui lòng chọn ít nhất một sản phẩm để thanh toán.";
        }
    }

    private void OnItemSelectionChanged(ChangeEventArgs e)
    {
        // Kiểm tra xem có sản phẩm nào được chọn hay không
        if (cartItemDtos.Any(item => item.IsSelected))
        {
            errorMessage = string.Empty; // Xóa thông báo lỗi khi có ít nhất một sản phẩm được chọn
        }
    }

    private async Task RemoveItem(CartItemDto item)
    {
        try
        {
            // Gọi API để xóa sản phẩm khỏi cơ sở dữ liệu dựa trên IDCart
            var response = await http.DeleteAsync($"api/Cart/IDCart?IDCart={item.IdCart}");

            if (response.IsSuccessStatusCode)
            {
                // Xóa sản phẩm khỏi danh sách giỏ hàng trong ứng dụng
                cartItemDtos.Remove(item);
                UpdateSelectedTotal(); // Cập nhật lại tổng số tiền sau khi xóa sản phẩm
            }
            else
            {
                errorMessage = "Không thể xóa sản phẩm: " + await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Lỗi khi xóa sản phẩm: " + ex.Message;
        }
    }

    public class CartItemDto
    {
        public int IdCart { get; set; }
        public int IdProduct { get; set; }
        public int Quantity { get; set; }
        public bool IsSelected { get; set; }
        public Product Product { get; set; } // Thông tin chi tiết sản phẩm
        public string CategoryName { get; set; } // Tên loại sản phẩm
        public string FirstImageUrl { get; set; } // URL của ảnh đầu tiên của sản phẩm
    }

    private class AccountInfoDto
    {
        public string UserName { get; set; }
        public string FullName { get; set; }
        public string PhoneNumber { get; set; }
        public string Gender { get; set; }
        public DateTime? Birthday { get; set; }
        public string ImageAccount { get; set; }
    }

    private Product product;
    private string categoryName;
    private List<ImageProduct> images;

    private async Task<Product> GetProductById(int id)
    {
        var response = await http.GetAsync($"api/product/GetProductById/{id}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<Product>();
        }
        throw new Exception("Cannot fetch product data");
    }

    public async Task<string> GetCategoryNameById(int idCategory)
    {
        var response = await http.GetAsync($"api/category/GetCategoryByID/{idCategory}");
        if (response.IsSuccessStatusCode)
        {
            var category = await response.Content.ReadFromJsonAsync<Category>();
            return category?.NameCate;
        }
        return null;
    }

    private async Task<List<ImageProduct>> GetImagesByProductId(int id)
    {
        var response = await http.GetAsync($"api/ImageProduct/GetImageProduct/{id}");
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<List<ImageProduct>>() ?? new List<ImageProduct>();
        }
        else
        {
            errorMessage = "Không thể tải ảnh từ API: " + response.ReasonPhrase;
            return new List<ImageProduct>(); // Trả về danh sách rỗng nếu có lỗi
        }
    }
}



<style>
    .cart-container {
        width: 80%;
        margin: 20px auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .select-all {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        font-weight: bold;
        font-size: 18px;
        color: #1D2939;
    }

    .select-all input {
        margin-right: 10px;
    }

    .cart-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 15px 0;
        border-bottom: 1px solid #ddd;
    }

    .cart-item:last-child {
        border-bottom: none;
    }

    .cart-item img {
         width: 80px;
         height: 80px;
         object-fit: cover;
         border-radius: 8px;
    }

    .item-details {
        flex: 2;
        margin-left: 15px;
    }

    .item-details h3 {
        margin: 0;
        font-size: 18px;
        color: #000;
    }

    .item-details p {
         margin: 5px 0;
         font-size: 14px;
         color: #6B7280;
    }

    .item-quantity {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .item-quantity button {
        width: 30px;
        height: 30px;
        border: none;
        background-color: #22c55e;
        color: #fff;
        font-size: 18px;
        border-radius: 50%;
        cursor: pointer;
    }

    .item-quantity span {
         width: 20px;
         text-align: center;
    }

    .item-price {
        flex: 1;
        text-align: right;
        font-size: 16px;
        color: #000;
    }

    .remove-item {
        border: none;
        background: none;
        font-size: 15px;
        cursor: pointer;
        color: #000000;
        position: relative;
        top: -40px;
    }

    .cart-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }

    .cart-actions button {
         padding: 10px 100px;
         font-size: 16px;
         border: none;
         border-radius: 5px;
         cursor: pointer;
         margin: 0 10px;
         font-weight: bold;
         transition: all 0.3s ease; /* Thêm hiệu ứng chuyển động */
    }

    .remove-all {
        background-color: #ef4444;
        color: #fff;
    }

    .remove-all:hover {
        background-color: #d32f2f; /* Hiệu ứng hover */
    }

    .remove-all:active {
        transform: scale(0.98); /* Hiệu ứng nhấn nút */
    }

    .continue-shopping {
        background-color: #22c55e;
        color: #fff;
    }

    .continue-shopping:hover {
        background-color: #1f9d42; /* Hiệu ứng hover */
    }

    .continue-shopping:active {
        transform: scale(0.98); /* Hiệu ứng nhấn nút */
    }

    .checkout {
        background-color: #16a34a;
        color: #fff;
    }

    .checkout:hover {
        background-color: #148f38; /* Hiệu ứng hover */
    }

    .checkout:active {
        transform: scale(0.98); 
    }

/*     .checkbox {
        margin-right: 15px;
    } */

    
    /* Product */
    .related-products {
        margin: 20px;
    }

    .related-products h2 {
        color: green;
        font-size: 24px;
        margin-bottom: 20px;
    }

    .product-list {
        display: flex;
        justify-content: space-between;
        gap: 10px;
    }

    .product-item {
        background-color: #fff;
        border: 1px solid #ddd;
        padding: 15px;
        width: 22%;
        box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.1);
        position: relative; 
        transition: transform 0.3s ease;
        display: flex;
        flex-direction: column;
        justify-content: space-between; 
    }

    .product-item:hover {
        transform: scale(1.05);
    }

    .product-item img {
        max-width: 100%;
        height: auto;
        display: block;
        margin: 0 auto;
    }

    .product-info {
        margin-top: 10px;
        text-align: left; 
    }

    .product-name {
        font-size: 16px;
        margin: 5px 0;
    }

    .product-price {
        color: red;
        font-size: 18px;
        font-weight: bold;
        margin: 10px 0;
    }

    .product-location {
        color: #888;
        font-size: 14px;
        margin-bottom: 5px;
    }

    .product-date {
        color: #888;
        font-size: 14px;
        position: absolute; 
        bottom: 10px; 
        right: 15px; 
    }
</style>

<div class="container-fluid">
    <ul class="breadcrumb">
        <li class="breadcrumb-item"><a href="#"><i class="bi bi-house"></i> Trang chủ</a></li>
        <li class="breadcrumb-item"><a href="#">Giỏ hàng của bạn</a></li>
    </ul>
</div>

<div class="row mt-2">
    <div class="col-1 col-md-1"></div>
    <div class="col-10 col-md-10">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th class="text-center align-middle" style="width:50px">
                            <div class="checkbox-wrapper-30 text-center">
                                <span class="checkbox">
                                    <input type="checkbox" @onchange="(e) => ToggleSelectAll((bool)e.Value)">
                                    <svg>
                                        <use xlink:href="#checkbox-30" class="checkbox"></use>
                                    </svg>
                                </span>
                                <svg xmlns="http://www.w3.org/2000/svg" style="display:none">
                                    <symbol id="checkbox-30" viewBox="0 0 22 22">
                                        <path fill="none" stroke="currentColor" d="M5.5,11.3L9,14.8L20.2,3.3l0,0c-0.5-1-1.5-1.8-2.7-1.8h-13c-1.7,0-3,1.3-3,3v13c0,1.7,1.3,3,3,3h13c1.7,0,3-1.3,3-3v-13c0-0.4-0.1-0.8-0.3-1.2" />
                                    </symbol>
                                </svg>
                            </div>
                        </th>
                        <th scope="col" class="text-center">Tên sản phẩm</th>
                        <th scope="col" class="text-center">Giá</th>
                     
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Cửa hàng 2 -->
                    <tr>
                        <th colspan="5" class="text-left font-weight-bold">Cửa hàng: Trần Văn B</th>
                    </tr>
                    @if (cartItemDtos != null && cartItemDtos.Any())
                    {
                        foreach (var cartItem in cartItemDtos)
                        {
                            <tr>
                                <th class="align-middle">
                                    <div class="checkbox-wrapper-30 text-center">
                                        <span class="checkbox">
                                            <input type="checkbox" checked="@cartItem.IsSelected" @onchange="(e) => OnItemSelectionChanged((bool)e.Value, cartItem)">
                                            <svg>
                                                <use xlink:href="#checkbox-30" class="checkbox"></use>
                                            </svg>
                                        </span>
                                    </div>
                                </th>
                                <td>
                                    <div class="row">
                                        <div class="col-md-4 d-flex justify-content-center">
                                            <!-- Hiển thị hình ảnh sản phẩm -->
                                            <img src="/AnhSanPham/@cartItem.FirstImageUrl" alt="Product Image" style="width:100px;" />
                                        </div>
                                        <div class="col-md-8">
                                            <!-- Hiển thị tên và loại sản phẩm -->
                                            <h4 class="m-0" style="font-weight:bolder">@cartItem.Product.Name</h4>
                                            <p class="m-0"><strong>Loại:</strong>@cartItem.CategoryName</p>
                                        </div>
                                    </div>
                                </td>
                                <!-- Hiển thị giá sản phẩm -->
                                <td class="align-middle text-center">
                                    <div style="color:green; font-weight:bolder">@($"{cartItem.Product.Price:N0} VNĐ")</div>
                                </td>
                                <!-- Remove Icon -->
                                <td class="align-middle text-center">
                                    <i class="bi bi-trash3-fill text-danger" style="cursor:pointer;" @onclick="async () => await RemoveItem(cartItem)"></i>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center">Không có sản phẩm nào trong giỏ hàng.</td>
                        </tr>
                    }

                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="2" class="text-right font-weight-bold">Tổng tiền cửa hàng:</td>
                        <td class="text-center font-weight-bold">@($"{selectedTotal:N0} VNĐ")</td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>
            <!-- Nút thanh toán -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            <div class="text-end mt-3">
                <button class="btn btn-success" @onclick="ProcessPayment">
                    <i class="bi bi-check-circle-fill"></i> Thanh toán
                </button>
            </div>

        </div>
    </div>
    <div class="col-1 col-md-1"></div>
</div>

<div class="related-products">
    <h2>Sản phẩm liên quan</h2>
    <div class="product-list">
        <div class="product-item">
            <img src="https://shopdunk.com/images/thumbs/0029155_iphone-16-pro-max-256gb_240.png" alt="Product Image">
            <div class="product-info">
                <p class="product-name">Tên sản phẩm</p>
                <p class="product-price">140.000VND</p>
                <p class="product-location">Cần Thơ</p>
                <p class="product-date">01/09/2024</p>
            </div>
        </div>
        <div class="product-item">
            <img src="https://shopdunk.com/images/thumbs/0029837_iphone-16-128gb_240.png" alt="Product Image">
            <div class="product-info">
                <p class="product-name">Tên sản phẩm</p>
                <p class="product-price">140.000VND</p>
                <p class="product-location">Cần Thơ</p>
                <p class="product-date">01/09/2024</p>
            </div>
        </div>
        <div class="product-item">
            <img src="https://shopdunk.com/images/thumbs/0029336_iphone-16-plus-128gb_240.png" alt="Product Image">
            <div class="product-info">
                <p class="product-name">Tên sản phẩm</p>
                <p class="product-price">140.000VND</p>
                <p class="product-location">Cần Thơ</p>
                <p class="product-date">01/09/2024</p>
            </div>
        </div>
        <div class="product-item">
            <img src="https://shopdunk.com/images/thumbs/0029337_iphone-16-pro-128gb_240.png" alt="Product Image">
            <div class="product-info">
                <p class="product-name">Tên sản phẩm</p>
                <p class="product-price">140.000VND</p>
                <p class="product-location">Cần Thơ</p>
                <p class="product-date">01/09/2024</p>
            </div>
        </div>
    </div>
</div>


