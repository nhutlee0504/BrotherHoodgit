@page "/BillDetail/{IDBill:int}"
@using SanGiaoDich_BrotherHood.Shared.Models
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<ul class="breadcrumb">
    <li class="breadcrumb-item"><a href="#"><i class="bi bi-house"></i> Trang chủ</a></li>
    <li class="breadcrumb-item"><a href="#">Hóa đơn của bạn</a></li>
    <li class="breadcrumb-item"><a href="#">Chi tiết hóa đơn</a></li>
</ul>

@if (billDetails == null)
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Đang tải dữ liệu...</span>
        </div>
    </div>
}
else if (!billDetails.Any())
{
    <p class="text-center text-danger">Không có chi tiết hóa đơn nào.</p>
}
else
{
    @if (isModalOpen)
    {
        <div class="image-modal" @onclick="CloseImageModal">
            <img src="@modalImageUrl" alt="Phóng to hình ảnh" />
        </div>
    }

    <div class="card-container">
        @foreach (var detail in billDetails)
        {
            <div class="card">
                <img src="@GetImage(detail.IDProduct)" alt="Hình ảnh sản phẩm" class="card-img-top" @onclick="() => OpenImageModal(GetImage(detail.IDProduct))" />
                <div class="card-body">
                    <h5 class="card-title">@GetProductName(detail.IDProduct)</h5>
                    <p class="card-text">Số lượng: @detail.Quantity</p>
                    <p class="card-text">Giá: @detail.Price.ToString("N0") VND</p>
                </div>
            </div>
        }
    </div>

    <div class="text-center mt-3">
        <button class="btn btn-primary" @onclick="NavigateBack">Quay lại</button>
    </div>
}

<style>
    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
        margin-top: 20px;
    }

    .card {
        width: 18rem;
        border: 1px solid #ddd;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s;
    }

        .card:hover {
            transform: scale(1.05);
        }

    .card-img-top {
        width: 100%;
        height: auto;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        cursor: pointer;
    }

    .card-body {
        padding: 15px;
    }

    .card-title {
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .card-text {
        margin: 5px 0;
    }

    .btn-primary {
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 5px;
        background-color: #28a745;
        color: white;
        border: none;
        transition: background-color 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #218838;
        }

    .image-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        cursor: pointer;
    }

        .image-modal img {
            max-width: 90%;
            max-height: 90%;
            border-radius: 10px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.7);
        }
</style>

@code {
    private bool isModalOpen = false;
    private string modalImageUrl = string.Empty;
    private Dictionary<int, string> productImages = new Dictionary<int, string>();
    private Dictionary<int, string> productNames = new Dictionary<int, string>();

    [Parameter]
    public int IDBill { get; set; }

    private List<BillDetailModel> billDetails;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            billDetails = await httpClient.GetFromJsonAsync<List<BillDetailModel>>($"api/BillDetail/GetBillDetailsByIDBill/{IDBill}");

            if (billDetails != null && billDetails.Any())
            {
                foreach (var detail in billDetails)
                {
                    await LoadImagesByIdProduct(detail.IDProduct);
                    await LoadProductName(detail.IDProduct);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải dữ liệu: {ex.Message}");
            billDetails = new List<BillDetailModel>();
        }
    }

    private void OpenImageModal(string imageUrl)
    {
        modalImageUrl = imageUrl;
        isModalOpen = true;
    }

    private void CloseImageModal()
    {
        isModalOpen = false;
    }

    private async Task LoadImagesByIdProduct(int id)
    {
        if (!productImages.ContainsKey(id))
        {
            try
            {
                var images = await httpClient.GetFromJsonAsync<List<ImageProduct>>($"api/imageproduct/GetImageProduct/{id}");

                productImages[id] = images?.FirstOrDefault()?.Image ?? "defaultImg.png";
            }
            catch
            {
                productImages[id] = "defaultImg.png";
            }
        }
    }

    private string GetImage(int id) => productImages.TryGetValue(id, out var imageUrl) ? imageUrl : "defaultImg.png";

    private async Task LoadProductName(int productId)
    {
        if (!productNames.ContainsKey(productId))
        {
            try
            {
                var product = await httpClient.GetFromJsonAsync<ProductModel>($"api/product/GetProductById/{productId}");

                productNames[productId] = product?.Name ?? "Sản phẩm không tồn tại";
            }
            catch
            {
                productNames[productId] = "Sản phẩm không tồn tại";
            }
        }
    }

    private string GetProductName(int id) => productNames.TryGetValue(id, out var productName) ? productName : "Tên sản phẩm không có";

    private void NavigateBack() => NavigationManager.NavigateTo("/Bill");

    public class BillDetailModel
    {
        public int IDBillDetail { get; set; }
        public int IDBill { get; set; }
        public int IDProduct { get; set; }
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }

    public class ImageProduct
    {
        public string Image { get; set; }
    }

    public class ProductModel
    {
        public int IDProduct { get; set; }
        public string Name { get; set; }
    }
}
